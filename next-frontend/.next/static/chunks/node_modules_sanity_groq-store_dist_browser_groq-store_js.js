/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_sanity_groq-store_dist_browser_groq-store_js"],{

/***/ "./node_modules/@sanity/groq-store/dist/browser/groq-store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sanity/groq-store/dist/browser/groq-store.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("function e(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}var r=e(__webpack_require__(/*! groq */ \"./node_modules/groq/lib/groq.js\")),t=e(__webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\")),n=__webpack_require__(/*! throttle-debounce */ \"./node_modules/throttle-debounce/cjs/index.js\"),o=__webpack_require__(/*! groq-js */ \"./node_modules/groq-js/dist/groq-js.esm.js\"),i=__webpack_require__(/*! mendoza */ \"./node_modules/mendoza/lib/esm/index.js\");function u(){return(u=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function s(e,r,t){var n,o=r.token,i=new e(\"https://\"+r.projectId+\".api.sanity.io/v1/data/listen/\"+r.dataset+\"?query=*&effectFormat=mendoza\",{withCredentials:!0,headers:o?{Authorization:\"Bearer \"+o}:void 0});return i.addEventListener(\"welcome\",t.open,!1),i.addEventListener(\"mutation\",(n=t.next,function(e){var r;try{r=JSON.parse(e.data)}catch(e){return}n(r)}),!1),i.addEventListener(\"channelError\",function(e){var r;i.close();try{r=JSON.parse(e.data)}catch(e){return void t.error(new Error(\"Unknown error parsing listener message\"))}t.error(new Error(r.message||r.error||\"Listener returned HTTP \"+r.statusCode))},!1),i.addEventListener(\"error\",function(e){var r=\"undefined\"!=typeof window&&window.location.origin,n=r?\", and that the CORS-origin (\"+r+\") is allowed\":\"\",o=function(e){return\"object\"==typeof e&&null!==e&&\"message\"in e}(e)?\" (\"+e.message+\")\":\"\";t.error(new Error(\"Error establishing listener - check that the project ID and dataset are correct\"+n+o))},!1),{unsubscribe:function(){return Promise.resolve(i.close())}}}function c(e){return e._id.startsWith(\"drafts.\")?e._id.slice(7):e._id}function a(e,r){var t=u({},e);return delete t._rev,i.applyPatch(t,r)}function f(){return Promise.resolve()}function d(){var e,r,t=(e=[\"*[_id == $id][0]\"],r||(r=e.slice(0)),e.raw=r,e);return d=function(){return t},t}function v(e,r,t){if(!e.s){if(t instanceof l){if(!t.s)return void(t.o=v.bind(null,e,r));1&r&&(r=t.s),t=t.v}if(t&&t.then)return void t.then(v.bind(null,e,r),v.bind(null,e,2));e.s=r,e.v=t;var n=e.o;n&&n(e)}}var l=function(){function e(){}return e.prototype.then=function(r,t){var n=new e,o=this.s;if(o){var i=1&o?r:t;if(i){try{v(n,1,i(this.v))}catch(e){v(n,2,e)}return n}return this}return this.o=function(e){try{var o=e.v;1&e.s?v(n,1,r?r(o):o):t?v(n,1,t(o)):v(n,2,o)}catch(e){v(n,2,e)}},n},e}();function h(e){return e instanceof l&&1&e.s}var m=function(e){var r=e.projectId,t=e.dataset,n=e.token,o=e.documentLimit;try{return Promise.resolve(fetch(\"https://\"+r+\".api.sanity.io/v1/data/export/\"+t,{credentials:\"include\",headers:n?{Authorization:\"Bearer \"+n}:void 0})).then(function(e){function r(r){var t,n,i=function(e){if(!e)throw new Error(\"Failed to read body from response\");var r,t=!1;function n(){t=!0,r&&r.cancel()}return new ReadableStream({start:function(o){r=e.getReader();var i=new TextDecoder,u=\"\";r.read().then(function e(s){try{if(s.done)return t?Promise.resolve():0===(u=u.trim()).length?(o.close(),Promise.resolve()):(o.enqueue(JSON.parse(u)),o.close(),Promise.resolve());for(var c=(u+=i.decode(s.value,{stream:!0})).split(\"\\n\"),a=0;a<c.length-1;++a){var f=c[a].trim();if(0===f.length)return Promise.resolve();try{o.enqueue(JSON.parse(f))}catch(e){return o.error(e),n(),Promise.resolve()}}if(u=c[c.length-1],!r)return Promise.resolve();var d=function(t,n){try{var o=Promise.resolve(r.read()).then(function(r){e(r)})}catch(e){return n(e)}return o&&o.then?o.then(void 0,n):o}(0,function(e){o.error(e)});return Promise.resolve(d&&d.then?d.then(function(){}):void 0)}catch(e){return Promise.reject(e)}}).catch(function(e){return o.error(e)})},cancel:n})}(e.body).getReader(),u=[],s=function(e,r){var t;do{var n=e();if(n&&n.then){if(!h(n)){t=!0;break}n=n.v}var o=r();if(h(o)&&(o=o.v),!o)return n}while(!o.then);var i=new l,u=v.bind(null,i,2);return(t?n.then(s):o.then(c)).then(void 0,u),i;function s(t){for(n=t;h(o=r())&&(o=o.v),o;){if(o.then)return void o.then(c).then(void 0,u);if((n=e())&&n.then){if(!h(n))return void n.then(s).then(void 0,u);n=n.v}}v(i,1,n)}function c(t){if(t){do{if((n=e())&&n.then){if(!h(n))return void n.then(s).then(void 0,u);n=n.v}if(h(t=r())&&(t=t.v),!t)return void v(i,1,n)}while(!t.then);t.then(c).then(void 0,u)}else v(i,1,n)}}(function(){return Promise.resolve(i.read()).then(function(e){if(function(e){return!!e&&\"error\"in e&&\"object\"==typeof e.error&&null!==e.error&&\"description\"in e.error&&\"string\"==typeof e.error.description&&!(\"_id\"in e)}(n=(t=e).value))throw new Error(\"Error streaming dataset: \"+n.error);if(n&&!n._id.startsWith(\"_.\")&&u.push(n),o&&u.length>o)throw i.cancel(\"Reached document limit\"),new Error(\"Error streaming dataset: Reached limit of \"+o+\" documents\")})},function(){return!t.done});return s&&s.then?s.then(function(e){return u}):u}var t=function(){if(200!==e.status)return Promise.resolve(e.json()).then(function(e){throw new Error(\"Error streaming dataset: \"+(\"object\"==typeof(r=e)&&\"error\"in r&&\"message\"in r?r.message||r.error:\"<unknown error>\"));var r})}();return t&&t.then?t.then(r):r()})}catch(e){return Promise.reject(e)}};exports.groq=r,exports.groqStore=function(e){if(function(){var e=[\"EventSource\",\"ReadableStream\",\"fetch\"].filter(function(e){return!(e in window)});if(e.length>0)throw new Error(\"Browser not supported. Missing browser APIs: \"+e.join(\", \"))}(),e.token)throw new Error(\"`token` option not currently supported in browser\");return function(e,i){var v,l=function(e,r){try{return Promise.resolve(h()).then(function(){var t=o.parse(e,{params:r});return Promise.resolve(o.evaluate(t,{dataset:m,params:r})).then(function(e){return e.get()})})}catch(e){return Promise.reject(e)}},h=function(){try{return v||(v=function(e,r,t){var n=t.getDocuments,o=t.EventSource,i=e.projectId,d=e.dataset,v=e.overlayDrafts,l=e.documentLimit;if(!e.listen)return{unsubscribe:f,loaded:n({projectId:i,dataset:d,documentLimit:l}).then(j).then(f)};var h,m,p,w,b,g,y=new Map,P=[],E=new Promise(function(e,r){m=e,p=r});return{unsubscribe:s(o,e,{next:function(e){h?(function(e){if(e.effects&&!e.documentId.startsWith(\"_.\")){var r=y.get(e.documentId)||null;!function(e,r){var t=y.get(e),n=h||[],o=t?n.indexOf(t):-1;-1===o&&r?(n.push(r),y.set(e,r)):r?(n.splice(o,1,r),y.set(e,r)):(n.splice(o,1),y.delete(e))}(e.documentId,a(r,e.effects.apply))}}(e),function(e,r){clearTimeout(g),b!==r.transactionId&&w?(j(w),b=void 0):(b=r.transactionId,w=e.slice()),g=setTimeout(j,25,e.slice())}(h,e)):P.push(e)},open:function(){try{return Promise.resolve(n({projectId:i,dataset:d,documentLimit:l})).then(function(e){(h=function(e,r){var t=new Map;return r.forEach(function(e){var r=t.get(e.documentId)||[];r.push(e),t.set(e.documentId,r)}),t.forEach(function(r,t){var n=e.find(function(e){return e._id===t});if(n){var o=!1,i=n;r.forEach(function(e){(o=o||e.previousRev===n._rev)&&e.effects&&(i=a(i,e.effects.apply))}),e.splice(e.indexOf(n),1,i)}else console.warn(\"Received mutation for missing document %s\",t)}),e}(e,P)).forEach(function(e){return y.set(e._id,e)}),j(h),m()})}catch(e){return Promise.reject(e)}},error:function(e){return p(e)}}).unsubscribe,loaded:E};function j(e){w=void 0,g=void 0,b=void 0,r(v?function(e){var r=new Map;return e.forEach(function(e){var t=r.get(c(e));e._id.startsWith(\"drafts.\")?r.set(c(e),function(e){return u({},e,{_id:c(e)})}(e)):t||r.set(e._id,e)}),Array.from(r.values())}(e):e)}}(e,function(e){m=e,p()},i)),Promise.resolve(v.loaded).then(function(){})}catch(e){return Promise.reject(e)}},m=[],p=n.throttle(e.subscriptionThrottleMs||50,function(){w.forEach(b)}),w=[];function b(e){return l(e.query,e.params).then(function(r){\"previousResult\"in e&&t(e.previousResult,r)||(e.previousResult=r,e.callback(void 0,r))}).catch(function(r){e.callback(r)})}return{query:l,getDocument:function(e){try{return Promise.resolve(h()).then(function(){return l(r(d()),{id:e})})}catch(e){return Promise.reject(e)}},getDocuments:function(e){try{return Promise.resolve(h()).then(function(){var r=e.map(function(e){return'*[_id == \"'+e+'\"][0]'}).join(\",\\n\");return l(\"[\"+r+\"]\")})}catch(e){return Promise.reject(e)}},subscribe:function(r,t,n){if(!e.listen)throw new Error(\"Cannot use `subscribe()` without `listen: true`\");var o={query:r,params:t,callback:n};w.push(o);var i=!1;return b(o),{unsubscribe:function(){return i||(i=!0,w.splice(w.indexOf(o),1)),Promise.resolve()}}},close:function(){return p.cancel(),v?v.unsubscribe():Promise.resolve()}}}(e,{EventSource:window.EventSource,getDocuments:m})};\r\n//# sourceMappingURL=groq-store.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sanity/groq-store/dist/browser/groq-store.js\n");

/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ (function(module) {

"use strict";
eval("\r\n\r\n// do not edit .js files directly - edit src/index.jst\r\n\r\n\r\n\r\nmodule.exports = function equal(a, b) {\r\n  if (a === b) return true;\r\n\r\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\r\n    if (a.constructor !== b.constructor) return false;\r\n\r\n    var length, i, keys;\r\n    if (Array.isArray(a)) {\r\n      length = a.length;\r\n      if (length != b.length) return false;\r\n      for (i = length; i-- !== 0;)\r\n        if (!equal(a[i], b[i])) return false;\r\n      return true;\r\n    }\r\n\r\n\r\n\r\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\r\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\r\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\r\n\r\n    keys = Object.keys(a);\r\n    length = keys.length;\r\n    if (length !== Object.keys(b).length) return false;\r\n\r\n    for (i = length; i-- !== 0;)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = length; i-- !== 0;) {\r\n      var key = keys[i];\r\n\r\n      if (!equal(a[key], b[key])) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // true if both NaN, false otherwise\r\n  return a!==a && b!==b;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFVBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanM/MGJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG4vLyBkbyBub3QgZWRpdCAuanMgZmlsZXMgZGlyZWN0bHkgLSBlZGl0IHNyYy9pbmRleC5qc3RcclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XHJcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG5cclxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XHJcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xyXG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcclxuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXHJcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcclxuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcclxuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XHJcblxyXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXHJcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XHJcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xyXG5cclxuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIHRydWUgaWYgYm90aCBOYU4sIGZhbHNlIG90aGVyd2lzZVxyXG4gIHJldHVybiBhIT09YSAmJiBiIT09YjtcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fast-deep-equal/index.js\n");

/***/ }),

/***/ "./node_modules/groq-js/dist/groq-js.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/groq-js/dist/groq-js.esm.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluate\": function() { return /* binding */ evaluateQuery; },\n/* harmony export */   \"parse\": function() { return /* binding */ parse; }\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nclass MarkProcessor {\r\n  constructor(string3, marks, parseOptions) {\r\n    this.allowBoost = false;\r\n    this.string = string3;\r\n    this.marks = marks;\r\n    this.index = 0;\r\n    this.parseOptions = parseOptions;\r\n  }\r\n  hasMark(pos = 0) {\r\n    return this.index + pos < this.marks.length;\r\n  }\r\n  getMark(pos = 0) {\r\n    return this.marks[this.index + pos];\r\n  }\r\n  shift() {\r\n    this.index += 1;\r\n  }\r\n  process(visitor) {\r\n    const mark = this.marks[this.index];\r\n    this.shift();\r\n    const func = visitor[mark.name];\r\n    if (!func) {\r\n      throw new Error(`Unknown handler: ${mark.name}`);\r\n    }\r\n    return func.call(visitor, this, mark);\r\n  }\r\n  processString() {\r\n    this.shift();\r\n    return this.processStringEnd();\r\n  }\r\n  processStringEnd() {\r\n    const prev = this.marks[this.index - 1];\r\n    const curr = this.marks[this.index];\r\n    this.shift();\r\n    return this.string.slice(prev.position, curr.position);\r\n  }\r\n  slice(len) {\r\n    const pos = this.marks[this.index].position;\r\n    return this.string.slice(pos, pos + len);\r\n  }\r\n}\r\nconst RFC3339_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([-+]\\d{2}:\\d{2}))$/;\r\nfunction parseRFC3339(str) {\r\n  if (RFC3339_REGEX.test(str)) {\r\n    return new Date(str);\r\n  }\r\n  return null;\r\n}\r\nfunction formatRFC3339(d) {\r\n  const year = addLeadingZero(d.getUTCFullYear(), 4);\r\n  const month = addLeadingZero(d.getUTCMonth() + 1, 2);\r\n  const day = addLeadingZero(d.getUTCDate(), 2);\r\n  const hour = addLeadingZero(d.getUTCHours(), 2);\r\n  const minute = addLeadingZero(d.getUTCMinutes(), 2);\r\n  const second = addLeadingZero(d.getUTCSeconds(), 2);\r\n  let fractionalSecond = \"\";\r\n  const millis = d.getMilliseconds();\r\n  if (millis != 0) {\r\n    fractionalSecond = `.${addLeadingZero(millis, 3)}`;\r\n  }\r\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}Z`;\r\n}\r\nfunction addLeadingZero(num, targetLength) {\r\n  let str = num.toString();\r\n  while (str.length < targetLength) {\r\n    str = `0${str}`;\r\n  }\r\n  return str;\r\n}\r\nfunction escapeRegExp(string3) {\r\n  return string3.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\nfunction pathRegExp(pattern) {\r\n  const re = [];\r\n  for (const part of pattern.split(\".\")) {\r\n    if (part === \"*\") {\r\n      re.push(\"[^.]+\");\r\n    } else if (part === \"**\") {\r\n      re.push(\".*\");\r\n    } else {\r\n      re.push(escapeRegExp(part));\r\n    }\r\n  }\r\n  return new RegExp(`^${re.join(\".\")}$`);\r\n}\r\nclass Path {\r\n  constructor(pattern) {\r\n    this.pattern = pattern;\r\n    this.patternRe = pathRegExp(pattern);\r\n  }\r\n  matches(str) {\r\n    return this.patternRe.test(str);\r\n  }\r\n  toJSON() {\r\n    return this.pattern;\r\n  }\r\n}\r\nclass StreamValue {\r\n  constructor(generator) {\r\n    this.type = \"stream\";\r\n    this.generator = generator;\r\n    this.ticker = null;\r\n    this.isDone = false;\r\n    this.data = [];\r\n  }\r\n  isArray() {\r\n    return true;\r\n  }\r\n  async get() {\r\n    const result = [];\r\n    for await (const value of this) {\r\n      result.push(await value.get());\r\n    }\r\n    return result;\r\n  }\r\n  async *[Symbol.asyncIterator]() {\r\n    let i = 0;\r\n    while (true) {\r\n      for (; i < this.data.length; i++) {\r\n        yield this.data[i];\r\n      }\r\n      if (this.isDone) {\r\n        return;\r\n      }\r\n      await this._nextTick();\r\n    }\r\n  }\r\n  _nextTick() {\r\n    if (this.ticker) {\r\n      return this.ticker;\r\n    }\r\n    let currentResolver;\r\n    const setupTicker = () => {\r\n      this.ticker = new Promise((resolve) => {\r\n        currentResolver = resolve;\r\n      });\r\n    };\r\n    const tick = () => {\r\n      currentResolver();\r\n      setupTicker();\r\n    };\r\n    const fetch = async () => {\r\n      for await (const value of this.generator()) {\r\n        this.data.push(value);\r\n        tick();\r\n      }\r\n      this.isDone = true;\r\n      tick();\r\n    };\r\n    setupTicker();\r\n    fetch();\r\n    return this.ticker;\r\n  }\r\n}\r\nclass StaticValue {\r\n  constructor(data, type) {\r\n    this.data = data;\r\n    this.type = type;\r\n  }\r\n  isArray() {\r\n    return this.type === \"array\";\r\n  }\r\n  async get() {\r\n    return this.data;\r\n  }\r\n  [Symbol.asyncIterator]() {\r\n    if (Array.isArray(this.data)) {\r\n      return function* (data) {\r\n        for (const element of data) {\r\n          yield fromJS(element);\r\n        }\r\n      }(this.data);\r\n    }\r\n    throw new Error(`Cannot iterate over: ${this.type}`);\r\n  }\r\n}\r\nconst NULL_VALUE = new StaticValue(null, \"null\");\r\nconst TRUE_VALUE = new StaticValue(true, \"boolean\");\r\nconst FALSE_VALUE = new StaticValue(false, \"boolean\");\r\nclass DateTime {\r\n  constructor(date) {\r\n    this.date = date;\r\n  }\r\n  static parseToValue(str) {\r\n    const date = parseRFC3339(str);\r\n    if (date) {\r\n      return new StaticValue(new DateTime(date), \"datetime\");\r\n    }\r\n    return NULL_VALUE;\r\n  }\r\n  equals(other) {\r\n    return this.date.getTime() == other.date.getTime();\r\n  }\r\n  add(secs) {\r\n    const copy = new Date(this.date.getTime());\r\n    copy.setTime(copy.getTime() + secs * 1e3);\r\n    return new DateTime(copy);\r\n  }\r\n  difference(other) {\r\n    return (this.date.getTime() - other.date.getTime()) / 1e3;\r\n  }\r\n  compareTo(other) {\r\n    return this.date.getTime() - other.date.getTime();\r\n  }\r\n  toString() {\r\n    return formatRFC3339(this.date);\r\n  }\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\nfunction fromNumber(num) {\r\n  if (Number.isFinite(num)) {\r\n    return new StaticValue(num, \"number\");\r\n  }\r\n  return NULL_VALUE;\r\n}\r\nfunction fromString(str) {\r\n  return new StaticValue(str, \"string\");\r\n}\r\nfunction fromDateTime(dt) {\r\n  return new StaticValue(dt, \"datetime\");\r\n}\r\nfunction fromPath(path2) {\r\n  return new StaticValue(path2, \"path\");\r\n}\r\nfunction isIterator(obj) {\r\n  return obj && typeof obj.next === \"function\";\r\n}\r\nfunction fromJS(val) {\r\n  if (isIterator(val)) {\r\n    return new StreamValue(async function* () {\r\n      for await (const value of val) {\r\n        yield fromJS(value);\r\n      }\r\n    });\r\n  } else if (val === null || val === void 0) {\r\n    return NULL_VALUE;\r\n  }\r\n  return new StaticValue(val, getType(val));\r\n}\r\nfunction getType(data) {\r\n  if (data === null || typeof data === \"undefined\") {\r\n    return \"null\";\r\n  }\r\n  if (Array.isArray(data)) {\r\n    return \"array\";\r\n  }\r\n  if (data instanceof Path) {\r\n    return \"path\";\r\n  }\r\n  if (data instanceof DateTime) {\r\n    return \"datetime\";\r\n  }\r\n  return typeof data;\r\n}\r\nconst TYPE_ORDER = {\r\n  datetime: 1,\r\n  number: 2,\r\n  string: 3,\r\n  boolean: 4\r\n};\r\nfunction partialCompare(a, b) {\r\n  const aType = getType(a);\r\n  const bType = getType(b);\r\n  if (aType !== bType) {\r\n    return null;\r\n  }\r\n  switch (aType) {\r\n    case \"number\":\r\n    case \"boolean\":\r\n      return a - b;\r\n    case \"string\":\r\n      if (a < b)\r\n        return -1;\r\n      if (a > b)\r\n        return 1;\r\n      return 0;\r\n    case \"datetime\":\r\n      return a.compareTo(b);\r\n    default:\r\n      return null;\r\n  }\r\n}\r\nfunction totalCompare(a, b) {\r\n  const aType = getType(a);\r\n  const bType = getType(b);\r\n  const aTypeOrder = TYPE_ORDER[aType] || 100;\r\n  const bTypeOrder = TYPE_ORDER[bType] || 100;\r\n  if (aTypeOrder !== bTypeOrder) {\r\n    return aTypeOrder - bTypeOrder;\r\n  }\r\n  let result = partialCompare(a, b);\r\n  if (result === null) {\r\n    result = 0;\r\n  }\r\n  return result;\r\n}\r\nconst CHARS = /([^!@#$%^&*(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\r\nconst CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\r\nconst EDGE_CHARS = /(\\b\\.+|\\.+\\b)/g;\r\nconst MAX_TERM_LENGTH = 1024;\r\nfunction matchText(tokens, patterns) {\r\n  if (tokens.length === 0 || patterns.length === 0) {\r\n    return false;\r\n  }\r\n  return patterns.every((pattern) => pattern(tokens));\r\n}\r\nfunction matchTokenize(text) {\r\n  return text.replace(EDGE_CHARS, \"\").match(CHARS) || [];\r\n}\r\nfunction matchAnalyzePattern(text) {\r\n  const termsRe = matchPatternRegex(text);\r\n  return termsRe.map((re) => (tokens) => tokens.some((token) => re.test(token)));\r\n}\r\nfunction matchPatternRegex(text) {\r\n  const terms = text.replace(EDGE_CHARS, \"\").match(CHARS_WITH_WILDCARD) || [];\r\n  return terms.map((term) => new RegExp(`^${term.slice(0, MAX_TERM_LENGTH).replace(/\\*/g, \".*\")}$`, \"i\"));\r\n}\r\nasync function gatherText(value, cb) {\r\n  if (value.type === \"string\") {\r\n    cb(value.data);\r\n    return true;\r\n  }\r\n  if (value.isArray()) {\r\n    let success = true;\r\n    for await (const part of value) {\r\n      if (part.type === \"string\") {\r\n        cb(part.data);\r\n      } else {\r\n        success = false;\r\n      }\r\n    }\r\n    return success;\r\n  }\r\n  return false;\r\n}\r\nconst BM25k = 1.2;\r\nasync function evaluateScore(node, scope, execute) {\r\n  if (node.type === \"OpCall\" && node.op === \"match\") {\r\n    return evaluateMatchScore(node.left, node.right, scope, execute);\r\n  }\r\n  if (node.type === \"FuncCall\" && node.name === \"boost\") {\r\n    const innerScore = await evaluateScore(node.args[0], scope, execute);\r\n    const boost2 = await execute(node.args[1], scope);\r\n    if (boost2.type === \"number\" && innerScore > 0) {\r\n      return innerScore + boost2.data;\r\n    }\r\n    return 0;\r\n  }\r\n  switch (node.type) {\r\n    case \"Or\": {\r\n      const leftScore = await evaluateScore(node.left, scope, execute);\r\n      const rightScore = await evaluateScore(node.right, scope, execute);\r\n      return leftScore + rightScore;\r\n    }\r\n    case \"And\": {\r\n      const leftScore = await evaluateScore(node.left, scope, execute);\r\n      const rightScore = await evaluateScore(node.right, scope, execute);\r\n      if (leftScore === 0 || rightScore === 0)\r\n        return 0;\r\n      return leftScore + rightScore;\r\n    }\r\n    default: {\r\n      const res = await execute(node, scope);\r\n      return res.type === \"boolean\" && res.data === true ? 1 : 0;\r\n    }\r\n  }\r\n}\r\nasync function evaluateMatchScore(left, right, scope, execute) {\r\n  const text = await execute(left, scope);\r\n  const pattern = await execute(right, scope);\r\n  let tokens = [];\r\n  let terms = [];\r\n  await gatherText(text, (part) => {\r\n    tokens = tokens.concat(matchTokenize(part));\r\n  });\r\n  const didSucceed = await gatherText(pattern, (part) => {\r\n    terms = terms.concat(matchPatternRegex(part));\r\n  });\r\n  if (!didSucceed) {\r\n    return 0;\r\n  }\r\n  if (tokens.length === 0 || terms.length === 0) {\r\n    return 0;\r\n  }\r\n  let score2 = 0;\r\n  for (const re of terms) {\r\n    const freq = tokens.reduce((c, token) => c + (re.test(token) ? 1 : 0), 0);\r\n    score2 += freq * (BM25k + 1) / (freq + BM25k);\r\n  }\r\n  return score2;\r\n}\r\nasync function portableTextContent(value) {\r\n  if (value.type === \"object\") {\r\n    return blockText(value.data);\r\n  } else if (value.isArray()) {\r\n    const texts = await arrayText(value);\r\n    if (texts.length > 0) {\r\n      return texts.join(\"\\n\\n\");\r\n    }\r\n  }\r\n  return null;\r\n}\r\nasync function arrayText(value, result = []) {\r\n  for await (const block of value) {\r\n    if (block.type === \"object\") {\r\n      const text = blockText(block.data);\r\n      if (text !== null)\r\n        result.push(text);\r\n    } else if (block.isArray()) {\r\n      await arrayText(block, result);\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction blockText(obj) {\r\n  if (typeof obj._type !== \"string\")\r\n    return null;\r\n  const children = obj.children;\r\n  if (!Array.isArray(children))\r\n    return null;\r\n  let result = \"\";\r\n  for (const child of children) {\r\n    if (child && typeof child === \"object\" && typeof child._type === \"string\" && child._type === \"span\" && typeof child.text === \"string\") {\r\n      result += child.text;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction hasReference(value, pathSet) {\r\n  switch (getType(value)) {\r\n    case \"array\":\r\n      for (const v of value) {\r\n        if (hasReference(v, pathSet)) {\r\n          return true;\r\n        }\r\n      }\r\n      break;\r\n    case \"object\":\r\n      if (value._ref) {\r\n        return pathSet.has(value._ref);\r\n      }\r\n      for (const v of Object.values(value)) {\r\n        if (hasReference(v, pathSet)) {\r\n          return true;\r\n        }\r\n      }\r\n      break;\r\n  }\r\n  return false;\r\n}\r\nfunction countUTF8(str) {\r\n  let count2 = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const code = str.charCodeAt(i);\r\n    if (code >= 55296 && code <= 56319) {\r\n      continue;\r\n    }\r\n    count2++;\r\n  }\r\n  return count2;\r\n}\r\nconst global = {};\r\nglobal.coalesce = async function coalesce(args, scope, execute) {\r\n  for (const arg of args) {\r\n    const value = await execute(arg, scope);\r\n    if (value.type !== \"null\") {\r\n      return value;\r\n    }\r\n  }\r\n  return NULL_VALUE;\r\n};\r\nglobal.count = async function count(args, scope, execute) {\r\n  const inner = await execute(args[0], scope);\r\n  if (!inner.isArray()) {\r\n    return NULL_VALUE;\r\n  }\r\n  let num = 0;\r\n  for await (const _ of inner) {\r\n    num++;\r\n  }\r\n  return fromNumber(num);\r\n};\r\nglobal.count.arity = 1;\r\nglobal.dateTime = async function dateTime(args, scope, execute) {\r\n  const val = await execute(args[0], scope);\r\n  if (val.type === \"datetime\") {\r\n    return val;\r\n  }\r\n  if (val.type !== \"string\") {\r\n    return NULL_VALUE;\r\n  }\r\n  return DateTime.parseToValue(val.data);\r\n};\r\nglobal.dateTime.arity = 1;\r\nglobal.defined = async function defined(args, scope, execute) {\r\n  const inner = await execute(args[0], scope);\r\n  return inner.type === \"null\" ? FALSE_VALUE : TRUE_VALUE;\r\n};\r\nglobal.defined.arity = 1;\r\nglobal.identity = async function identity(args, scope) {\r\n  return fromString(scope.context.identity);\r\n};\r\nglobal.identity.arity = 0;\r\nglobal.length = async function length(args, scope, execute) {\r\n  const inner = await execute(args[0], scope);\r\n  if (inner.type === \"string\") {\r\n    return fromNumber(countUTF8(inner.data));\r\n  }\r\n  if (inner.isArray()) {\r\n    let num = 0;\r\n    for await (const _ of inner) {\r\n      num++;\r\n    }\r\n    return fromNumber(num);\r\n  }\r\n  return NULL_VALUE;\r\n};\r\nglobal.length.arity = 1;\r\nglobal.path = async function path(args, scope, execute) {\r\n  const inner = await execute(args[0], scope);\r\n  if (inner.type !== \"string\") {\r\n    return NULL_VALUE;\r\n  }\r\n  return fromPath(new Path(inner.data));\r\n};\r\nglobal.path.arity = 1;\r\nglobal.string = async function string(args, scope, execute) {\r\n  const value = await execute(args[0], scope);\r\n  switch (value.type) {\r\n    case \"number\":\r\n    case \"string\":\r\n    case \"boolean\":\r\n    case \"datetime\":\r\n      return fromString(`${value.data}`);\r\n    default:\r\n      return NULL_VALUE;\r\n  }\r\n};\r\nglobal.string.arity = 1;\r\nglobal.references = async function references(args, scope, execute) {\r\n  const pathSet = new Set();\r\n  for (const arg of args) {\r\n    const path2 = await execute(arg, scope);\r\n    if (path2.type === \"string\") {\r\n      pathSet.add(path2.data);\r\n    } else if (path2.isArray()) {\r\n      for await (const elem of path2) {\r\n        if (elem.type === \"string\") {\r\n          pathSet.add(elem.data);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (pathSet.size === 0) {\r\n    return FALSE_VALUE;\r\n  }\r\n  const scopeValue = await scope.value.get();\r\n  return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;\r\n};\r\nglobal.references.arity = (c) => c >= 1;\r\nglobal.round = async function round(args, scope, execute) {\r\n  const value = await execute(args[0], scope);\r\n  if (value.type !== \"number\") {\r\n    return NULL_VALUE;\r\n  }\r\n  const num = value.data;\r\n  let prec = 0;\r\n  if (args.length === 2) {\r\n    const precValue = await execute(args[1], scope);\r\n    if (precValue.type !== \"number\" || precValue.data < 0 || !Number.isInteger(precValue.data)) {\r\n      return NULL_VALUE;\r\n    }\r\n    prec = precValue.data;\r\n  }\r\n  if (prec === 0) {\r\n    if (num < 0) {\r\n      return fromNumber(-Math.round(-num));\r\n    }\r\n    return fromNumber(Math.round(num));\r\n  }\r\n  return fromNumber(Number(num.toFixed(prec)));\r\n};\r\nglobal.round.arity = (count2) => count2 >= 1 && count2 <= 2;\r\nglobal.now = async function now(args, scope) {\r\n  return fromString(scope.context.timestamp.toISOString());\r\n};\r\nglobal.now.arity = 0;\r\nglobal.boost = async function boost() {\r\n  throw new Error(\"unexpected boost call\");\r\n};\r\nglobal.boost.arity = 2;\r\nconst string2 = {};\r\nstring2.lower = async function(args, scope, execute) {\r\n  const value = await execute(args[0], scope);\r\n  if (value.type !== \"string\") {\r\n    return NULL_VALUE;\r\n  }\r\n  return fromString(value.data.toLowerCase());\r\n};\r\nstring2.lower.arity = 1;\r\nstring2.upper = async function(args, scope, execute) {\r\n  const value = await execute(args[0], scope);\r\n  if (value.type !== \"string\") {\r\n    return NULL_VALUE;\r\n  }\r\n  return fromString(value.data.toUpperCase());\r\n};\r\nstring2.upper.arity = 1;\r\nglobal.lower = string2.lower;\r\nglobal.upper = string2.upper;\r\nconst pt = {};\r\npt.text = async function(args, scope, execute) {\r\n  const value = await execute(args[0], scope);\r\n  const text = await portableTextContent(value);\r\n  if (text === null) {\r\n    return NULL_VALUE;\r\n  }\r\n  return fromString(text);\r\n};\r\npt.text.arity = 1;\r\nconst sanity = {};\r\nsanity.projectId = async function(args, scope) {\r\n  if (scope.context.sanity) {\r\n    return fromString(scope.context.sanity.projectId);\r\n  }\r\n  return NULL_VALUE;\r\n};\r\nsanity.dataset = async function(args, scope) {\r\n  if (scope.context.sanity) {\r\n    return fromString(scope.context.sanity.dataset);\r\n  }\r\n  return NULL_VALUE;\r\n};\r\nconst pipeFunctions = {};\r\npipeFunctions.order = async function order(base, args, scope, execute) {\r\n  await true;\r\n  if (!base.isArray()) {\r\n    return NULL_VALUE;\r\n  }\r\n  const mappers = [];\r\n  const directions = [];\r\n  let n = 0;\r\n  for (let mapper of args) {\r\n    let direction = \"asc\";\r\n    if (mapper.type === \"Desc\") {\r\n      direction = \"desc\";\r\n      mapper = mapper.base;\r\n    } else if (mapper.type === \"Asc\") {\r\n      mapper = mapper.base;\r\n    }\r\n    mappers.push(mapper);\r\n    directions.push(direction);\r\n    n++;\r\n  }\r\n  const aux = [];\r\n  let idx = 0;\r\n  for await (const value of base) {\r\n    const newScope = scope.createNested(value);\r\n    const tuple = [await value.get(), idx];\r\n    for (let i = 0; i < n; i++) {\r\n      const result = await execute(mappers[i], newScope);\r\n      tuple.push(await result.get());\r\n    }\r\n    aux.push(tuple);\r\n    idx++;\r\n  }\r\n  aux.sort((aTuple, bTuple) => {\r\n    for (let i = 0; i < n; i++) {\r\n      let c = totalCompare(aTuple[i + 2], bTuple[i + 2]);\r\n      if (directions[i] === \"desc\") {\r\n        c = -c;\r\n      }\r\n      if (c !== 0) {\r\n        return c;\r\n      }\r\n    }\r\n    return aTuple[1] - bTuple[1];\r\n  });\r\n  return fromJS(aux.map((v) => v[0]));\r\n};\r\npipeFunctions.order.arity = (count2) => count2 >= 1;\r\npipeFunctions.score = async function score(base, args, scope, execute) {\r\n  if (!base.isArray())\r\n    return NULL_VALUE;\r\n  const unknown = [];\r\n  const scored = [];\r\n  for await (const value of base) {\r\n    if (value.type !== \"object\") {\r\n      unknown.push(await value.get());\r\n      continue;\r\n    }\r\n    const newScope = scope.createNested(value);\r\n    let valueScore = typeof value.data._score === \"number\" ? value.data._score : 0;\r\n    for (const arg of args) {\r\n      valueScore += await evaluateScore(arg, newScope, execute);\r\n    }\r\n    const newObject = Object.assign({}, value.data, { _score: valueScore });\r\n    scored.push(newObject);\r\n  }\r\n  scored.sort((a, b) => b._score - a._score);\r\n  return fromJS(scored);\r\n};\r\npipeFunctions.score.arity = (count2) => count2 >= 1;\r\nconst delta = {};\r\ndelta.operation = async function(args, scope) {\r\n  const hasBefore = scope.context.before !== null;\r\n  const hasAfter = scope.context.after !== null;\r\n  if (hasBefore && hasAfter) {\r\n    return fromString(\"update\");\r\n  }\r\n  if (hasAfter) {\r\n    return fromString(\"create\");\r\n  }\r\n  if (hasBefore) {\r\n    return fromString(\"delete\");\r\n  }\r\n  return NULL_VALUE;\r\n};\r\ndelta.changedAny = () => {\r\n  throw new Error(\"not implemented\");\r\n};\r\ndelta.changedAny.arity = 1;\r\ndelta.changedAny.mode = \"delta\";\r\ndelta.changedOnly = () => {\r\n  throw new Error(\"not implemented\");\r\n};\r\ndelta.changedOnly.arity = 1;\r\ndelta.changedOnly.mode = \"delta\";\r\nconst diff = {};\r\ndiff.changedAny = () => {\r\n  throw new Error(\"not implemented\");\r\n};\r\ndiff.changedAny.arity = 3;\r\ndiff.changedOnly = () => {\r\n  throw new Error(\"not implemented\");\r\n};\r\ndiff.changedOnly.arity = 3;\r\nconst namespaces = {\r\n  global,\r\n  string: string2,\r\n  pt,\r\n  delta,\r\n  diff,\r\n  sanity\r\n};\r\nconst WS = /^([\\t\\n\\v\\f\\r \\u0085\\u00A0]|(\\/\\/[^\\n]*\\n))+/;\r\nconst NUM = /^\\d+/;\r\nconst IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/;\r\nconst PREC_PAIR = 1;\r\nconst PREC_OR = 2;\r\nconst PREC_AND = 3;\r\nconst PREC_COMP = 4;\r\nconst PREC_ORDER = 4;\r\nconst PREC_ADD = 6;\r\nconst PREC_SUB = 6;\r\nconst PREC_MUL = 7;\r\nconst PREC_DIV = 7;\r\nconst PREC_MOD = 7;\r\nconst PREC_POW = 8;\r\nconst PREC_POS = 10;\r\nconst PREC_NOT = 10;\r\nconst PREC_NEG = 8;\r\nfunction parse$1(str) {\r\n  let pos = 0;\r\n  pos = skipWS(str, pos);\r\n  let result = parseExpr(str, pos, 0);\r\n  if (result.type === \"error\")\r\n    return result;\r\n  pos = skipWS(str, result.position);\r\n  if (pos !== str.length) {\r\n    if (result.failPosition) {\r\n      pos = result.failPosition - 1;\r\n    }\r\n    return { type: \"error\", position: pos };\r\n  }\r\n  delete result.position;\r\n  delete result.failPosition;\r\n  return result;\r\n}\r\nfunction parseExpr(str, pos, level) {\r\n  let startPos = pos;\r\n  let token = str[pos];\r\n  let marks;\r\n  switch (token) {\r\n    case \"+\": {\r\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);\r\n      if (rhs.type === \"error\")\r\n        return rhs;\r\n      marks = [{ name: \"pos\", position: startPos }].concat(rhs.marks);\r\n      pos = rhs.position;\r\n      break;\r\n    }\r\n    case \"-\": {\r\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);\r\n      if (rhs.type === \"error\")\r\n        return rhs;\r\n      marks = [{ name: \"neg\", position: startPos }].concat(rhs.marks);\r\n      pos = rhs.position;\r\n      break;\r\n    }\r\n    case \"(\": {\r\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 0);\r\n      if (rhs.type === \"error\")\r\n        return rhs;\r\n      pos = skipWS(str, rhs.position);\r\n      switch (str[pos]) {\r\n        case \",\": {\r\n          marks = [{ name: \"tuple\", position: startPos }].concat(rhs.marks);\r\n          pos = skipWS(str, pos + 1);\r\n          while (true) {\r\n            rhs = parseExpr(str, pos, 0);\r\n            if (rhs.type === \"error\")\r\n              return rhs;\r\n            pos = skipWS(str, rhs.position);\r\n            if (str[pos] !== \",\")\r\n              break;\r\n            pos = skipWS(str, pos + 1);\r\n          }\r\n          if (str[pos] !== \")\")\r\n            return { type: \"error\", position: pos };\r\n          pos++;\r\n          marks.push({ name: \"tuple_end\", position: pos });\r\n          break;\r\n        }\r\n        case \")\": {\r\n          pos++;\r\n          marks = [{ name: \"group\", position: startPos }].concat(rhs.marks);\r\n          break;\r\n        }\r\n        default:\r\n          return { type: \"error\", position: pos };\r\n      }\r\n      break;\r\n    }\r\n    case \"!\": {\r\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);\r\n      if (rhs.type === \"error\")\r\n        return rhs;\r\n      marks = [{ name: \"not\", position: startPos }].concat(rhs.marks);\r\n      pos = rhs.position;\r\n      break;\r\n    }\r\n    case \"{\": {\r\n      let result = parseObject(str, pos);\r\n      if (result.type === \"error\")\r\n        return result;\r\n      marks = result.marks;\r\n      pos = result.position;\r\n      break;\r\n    }\r\n    case \"[\":\r\n      marks = [{ name: \"array\", position: pos }];\r\n      pos = skipWS(str, pos + 1);\r\n      if (str[pos] !== \"]\") {\r\n        while (true) {\r\n          if (str.slice(pos, pos + 3) === \"...\") {\r\n            marks.push({ name: \"array_splat\", position: pos });\r\n            pos = skipWS(str, pos + 3);\r\n          }\r\n          let res = parseExpr(str, pos, 0);\r\n          if (res.type === \"error\")\r\n            return res;\r\n          marks = marks.concat(res.marks);\r\n          pos = res.position;\r\n          pos = skipWS(str, pos);\r\n          if (str[pos] !== \",\")\r\n            break;\r\n          pos = skipWS(str, pos + 1);\r\n          if (str[pos] === \"]\")\r\n            break;\r\n        }\r\n      }\r\n      if (str[pos] === \"]\") {\r\n        pos++;\r\n        marks.push({ name: \"array_end\", position: pos });\r\n      } else {\r\n        return { type: \"error\", position: pos };\r\n      }\r\n      break;\r\n    case \"'\":\r\n    case '\"': {\r\n      let result = parseString(str, pos);\r\n      if (result.type === \"error\")\r\n        return result;\r\n      marks = result.marks;\r\n      pos = result.position;\r\n      break;\r\n    }\r\n    case \"^\": {\r\n      pos++;\r\n      marks = [];\r\n      while (str[pos] === \".\" && str[pos + 1] === \"^\") {\r\n        marks.push({ name: \"dblparent\", position: startPos });\r\n        pos += 2;\r\n      }\r\n      marks.push({ name: \"parent\", position: startPos });\r\n      break;\r\n    }\r\n    case \"@\":\r\n      marks = [{ name: \"this\", position: startPos }];\r\n      pos++;\r\n      break;\r\n    case \"*\":\r\n      marks = [{ name: \"everything\", position: startPos }];\r\n      pos++;\r\n      break;\r\n    case \"$\": {\r\n      let identLen = parseRegex(str, pos + 1, IDENT);\r\n      if (identLen) {\r\n        pos += 1 + identLen;\r\n        marks = [\r\n          { name: \"param\", position: startPos },\r\n          { name: \"ident\", position: startPos + 1 },\r\n          { name: \"ident_end\", position: pos }\r\n        ];\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      let numLen = parseRegex(str, pos, NUM);\r\n      if (numLen) {\r\n        pos += numLen;\r\n        let name = \"integer\";\r\n        if (str[pos] === \".\") {\r\n          let fracLen = parseRegex(str, pos + 1, NUM);\r\n          if (fracLen) {\r\n            name = \"float\";\r\n            pos += 1 + fracLen;\r\n          }\r\n        }\r\n        if (str[pos] === \"e\" || str[pos] === \"E\") {\r\n          name = \"sci\";\r\n          pos++;\r\n          if (str[pos] === \"+\" || str[pos] === \"-\") {\r\n            pos++;\r\n          }\r\n          let expLen = parseRegex(str, pos, NUM);\r\n          if (!expLen)\r\n            return { type: \"error\", position: pos };\r\n          pos += expLen;\r\n        }\r\n        marks = [\r\n          { name, position: startPos },\r\n          { name: name + \"_end\", position: pos }\r\n        ];\r\n        break;\r\n      }\r\n      let identLen = parseRegex(str, pos, IDENT);\r\n      if (identLen) {\r\n        pos += identLen;\r\n        switch (str[pos]) {\r\n          case \":\":\r\n          case \"(\": {\r\n            let result = parseFuncCall(str, startPos, pos);\r\n            if (result.type === \"error\")\r\n              return result;\r\n            marks = result.marks;\r\n            pos = result.position;\r\n            break;\r\n          }\r\n          default: {\r\n            marks = [\r\n              { name: \"this_attr\", position: startPos },\r\n              { name: \"ident\", position: startPos },\r\n              { name: \"ident_end\", position: pos }\r\n            ];\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (!marks) {\r\n    return { type: \"error\", position: pos };\r\n  }\r\n  let lhsLevel = 12;\r\n  let trav;\r\n  loop:\r\n    while (true) {\r\n      let innerPos = skipWS(str, pos);\r\n      if (innerPos === str.length) {\r\n        pos = innerPos;\r\n        break;\r\n      }\r\n      trav = parseTraversal(str, innerPos);\r\n      if (trav.type === \"success\") {\r\n        marks.unshift({ name: \"traverse\", position: startPos });\r\n        while (trav.type === \"success\") {\r\n          marks = marks.concat(trav.marks);\r\n          pos = trav.position;\r\n          trav = parseTraversal(str, skipWS(str, pos));\r\n        }\r\n        marks.push({ name: \"traversal_end\", position: pos });\r\n        continue;\r\n      }\r\n      let token2 = str[innerPos];\r\n      switch (token2) {\r\n        case \"=\": {\r\n          let nextToken = str[innerPos + 1];\r\n          switch (nextToken) {\r\n            case \">\": {\r\n              if (level > PREC_PAIR || lhsLevel <= PREC_PAIR)\r\n                break loop;\r\n              let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);\r\n              if (rhs.type === \"error\")\r\n                return rhs;\r\n              marks = marks.concat(rhs.marks);\r\n              marks.unshift({ name: \"pair\", position: startPos });\r\n              pos = rhs.position;\r\n              lhsLevel = PREC_PAIR;\r\n              break;\r\n            }\r\n            case \"=\": {\r\n              if (level > PREC_COMP || lhsLevel <= PREC_COMP)\r\n                break loop;\r\n              let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);\r\n              if (rhs.type === \"error\")\r\n                return rhs;\r\n              marks.unshift({ name: \"comp\", position: startPos });\r\n              marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 });\r\n              marks = marks.concat(rhs.marks);\r\n              pos = rhs.position;\r\n              lhsLevel = PREC_COMP;\r\n              break;\r\n            }\r\n            default:\r\n              break loop;\r\n          }\r\n          break;\r\n        }\r\n        case \"+\": {\r\n          if (level > PREC_ADD || lhsLevel < PREC_ADD)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"add\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_ADD;\r\n          break;\r\n        }\r\n        case \"-\": {\r\n          if (level > PREC_SUB || lhsLevel < PREC_SUB)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"sub\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_SUB;\r\n          break;\r\n        }\r\n        case \"*\": {\r\n          if (str[innerPos + 1] === \"*\") {\r\n            if (level > PREC_POW || lhsLevel <= PREC_POW)\r\n              break loop;\r\n            let rhs2 = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);\r\n            if (rhs2.type === \"error\")\r\n              return rhs2;\r\n            marks = marks.concat(rhs2.marks);\r\n            marks.unshift({ name: \"pow\", position: startPos });\r\n            pos = rhs2.position;\r\n            lhsLevel = PREC_POW;\r\n            break;\r\n          }\r\n          if (level > PREC_MUL || lhsLevel < PREC_MUL)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"mul\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_MUL;\r\n          break;\r\n        }\r\n        case \"/\": {\r\n          if (level > PREC_DIV || lhsLevel < PREC_DIV)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"div\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_DIV;\r\n          break;\r\n        }\r\n        case \"%\": {\r\n          if (level > PREC_MOD || lhsLevel < PREC_MOD)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"mod\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_MOD;\r\n          break;\r\n        }\r\n        case \"<\":\r\n        case \">\": {\r\n          if (level > PREC_COMP || lhsLevel <= PREC_COMP)\r\n            break loop;\r\n          let nextPos = innerPos + 1;\r\n          if (str[nextPos] === \"=\") {\r\n            nextPos++;\r\n          }\r\n          let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks.unshift({ name: \"comp\", position: startPos });\r\n          marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: nextPos });\r\n          marks = marks.concat(rhs.marks);\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_COMP;\r\n          break;\r\n        }\r\n        case \"|\": {\r\n          if (str[innerPos + 1] === \"|\") {\r\n            if (level > PREC_OR || lhsLevel < PREC_OR)\r\n              break loop;\r\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);\r\n            if (rhs.type === \"error\")\r\n              return rhs;\r\n            marks = marks.concat(rhs.marks);\r\n            marks.unshift({ name: \"or\", position: startPos });\r\n            pos = rhs.position;\r\n            lhsLevel = PREC_OR;\r\n          } else {\r\n            if (level > 11 || lhsLevel < 11)\r\n              break loop;\r\n            let identPos = skipWS(str, innerPos + 1);\r\n            let identLen = parseRegex(str, identPos, IDENT);\r\n            if (!identLen)\r\n              return { type: \"error\", position: identPos };\r\n            pos = identPos + identLen;\r\n            if (str[pos] === \"(\" || str[pos] === \":\") {\r\n              let result = parseFuncCall(str, identPos, pos);\r\n              if (result.type === \"error\")\r\n                return result;\r\n              marks = marks.concat(result.marks);\r\n              marks.unshift({ name: \"pipecall\", position: startPos });\r\n              pos = result.position;\r\n              lhsLevel = 11;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case \"&\": {\r\n          if (str[innerPos + 1] != \"&\")\r\n            break loop;\r\n          if (level > PREC_AND || lhsLevel < PREC_AND)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks = marks.concat(rhs.marks);\r\n          marks.unshift({ name: \"and\", position: startPos });\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_AND;\r\n          break;\r\n        }\r\n        case \"!\": {\r\n          if (str[innerPos + 1] !== \"=\")\r\n            break loop;\r\n          if (level > PREC_COMP || lhsLevel < PREC_COMP)\r\n            break loop;\r\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);\r\n          if (rhs.type === \"error\")\r\n            return rhs;\r\n          marks.unshift({ name: \"comp\", position: startPos });\r\n          marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 });\r\n          marks = marks.concat(rhs.marks);\r\n          pos = rhs.position;\r\n          lhsLevel = PREC_COMP;\r\n          break;\r\n        }\r\n        case \"d\": {\r\n          if (str.slice(innerPos, innerPos + 4) !== \"desc\")\r\n            break loop;\r\n          if (level > PREC_ORDER || lhsLevel < PREC_ORDER)\r\n            break loop;\r\n          marks.unshift({ name: \"desc\", position: startPos });\r\n          pos = innerPos + 4;\r\n          lhsLevel = PREC_ORDER;\r\n          break;\r\n        }\r\n        case \"a\": {\r\n          if (str.slice(innerPos, innerPos + 3) !== \"asc\")\r\n            break loop;\r\n          if (level > PREC_ORDER || lhsLevel < PREC_ORDER)\r\n            break loop;\r\n          marks.unshift({ name: \"asc\", position: startPos });\r\n          pos = innerPos + 3;\r\n          lhsLevel = PREC_ORDER;\r\n          break;\r\n        }\r\n        default: {\r\n          let ident = parseRegexStr(str, innerPos, IDENT);\r\n          switch (ident) {\r\n            case \"in\": {\r\n              if (level > PREC_COMP || lhsLevel <= PREC_COMP)\r\n                break loop;\r\n              pos = skipWS(str, innerPos + 2);\r\n              let isGroup = false;\r\n              if (str[pos] === \"(\") {\r\n                isGroup = true;\r\n                pos = skipWS(str, pos + 1);\r\n              }\r\n              let rangePos = pos;\r\n              let result = parseExpr(str, pos, PREC_COMP + 1);\r\n              if (result.type === \"error\")\r\n                return result;\r\n              pos = skipWS(str, result.position);\r\n              if (str[pos] === \".\" && str[pos + 1] === \".\") {\r\n                let type = \"inc_range\";\r\n                if (str[pos + 2] === \".\") {\r\n                  type = \"exc_range\";\r\n                  pos = skipWS(str, pos + 3);\r\n                } else {\r\n                  pos = skipWS(str, pos + 2);\r\n                }\r\n                let rhs = parseExpr(str, pos, PREC_COMP + 1);\r\n                if (rhs.type === \"error\")\r\n                  return rhs;\r\n                marks.unshift({ name: \"in_range\", position: startPos });\r\n                marks = marks.concat({ name: type, position: rangePos }, result.marks, rhs.marks);\r\n                pos = rhs.position;\r\n              } else {\r\n                marks.unshift({ name: \"comp\", position: startPos });\r\n                marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 });\r\n                marks = marks.concat(result.marks);\r\n              }\r\n              if (isGroup) {\r\n                pos = skipWS(str, pos);\r\n                if (str[pos] !== \")\")\r\n                  return { type: \"error\", position: pos };\r\n                pos++;\r\n              }\r\n              lhsLevel = PREC_COMP;\r\n              break;\r\n            }\r\n            case \"match\": {\r\n              if (level > PREC_COMP || lhsLevel <= PREC_COMP)\r\n                break loop;\r\n              let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);\r\n              if (rhs.type === \"error\")\r\n                return rhs;\r\n              marks.unshift({ name: \"comp\", position: startPos });\r\n              marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 5 });\r\n              marks = marks.concat(rhs.marks);\r\n              pos = rhs.position;\r\n              lhsLevel = 4;\r\n              break;\r\n            }\r\n            default: {\r\n              break loop;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  let failPosition = (trav == null ? void 0 : trav.type) === \"error\" && trav.position;\r\n  return { type: \"success\", marks, position: pos, failPosition };\r\n}\r\nfunction parseTraversal(str, pos) {\r\n  let startPos = pos;\r\n  switch (str[pos]) {\r\n    case \".\": {\r\n      pos = skipWS(str, pos + 1);\r\n      let identStart = pos;\r\n      let identLen2 = parseRegex(str, pos, IDENT);\r\n      if (!identLen2)\r\n        return { type: \"error\", position: pos };\r\n      pos += identLen2;\r\n      return {\r\n        type: \"success\",\r\n        marks: [\r\n          { name: \"attr_access\", position: startPos },\r\n          { name: \"ident\", position: identStart },\r\n          { name: \"ident_end\", position: pos }\r\n        ],\r\n        position: pos\r\n      };\r\n    }\r\n    case \"-\":\r\n      if (str[pos + 1] !== \">\")\r\n        return { type: \"error\", position: pos };\r\n      let marks = [{ name: \"deref\", position: startPos }];\r\n      pos += 2;\r\n      let identPos = skipWS(str, pos);\r\n      let identLen = parseRegex(str, identPos, IDENT);\r\n      if (identLen) {\r\n        pos = identPos + identLen;\r\n        marks.push({ name: \"deref_attr\", position: identPos }, { name: \"ident\", position: identPos }, { name: \"ident_end\", position: pos });\r\n      }\r\n      return {\r\n        type: \"success\",\r\n        marks,\r\n        position: pos\r\n      };\r\n    case \"[\": {\r\n      pos = skipWS(str, pos + 1);\r\n      if (str[pos] === \"]\") {\r\n        return {\r\n          type: \"success\",\r\n          marks: [{ name: \"array_postfix\", position: startPos }],\r\n          position: pos + 1\r\n        };\r\n      }\r\n      let rangePos = pos;\r\n      let result = parseExpr(str, pos, 0);\r\n      if (result.type === \"error\")\r\n        return result;\r\n      pos = skipWS(str, result.position);\r\n      if (str[pos] === \".\" && str[pos + 1] === \".\") {\r\n        let type = \"inc_range\";\r\n        if (str[pos + 2] === \".\") {\r\n          type = \"exc_range\";\r\n          pos += 3;\r\n        } else {\r\n          pos += 2;\r\n        }\r\n        pos = skipWS(str, pos);\r\n        let rhs = parseExpr(str, pos, 0);\r\n        if (rhs.type === \"error\")\r\n          return rhs;\r\n        pos = skipWS(str, rhs.position);\r\n        if (str[pos] !== \"]\")\r\n          return { type: \"error\", position: pos };\r\n        return {\r\n          type: \"success\",\r\n          marks: [\r\n            { name: \"slice\", position: startPos },\r\n            { name: type, position: rangePos }\r\n          ].concat(result.marks, rhs.marks),\r\n          position: pos + 1\r\n        };\r\n      }\r\n      if (str[pos] !== \"]\")\r\n        return { type: \"error\", position: pos };\r\n      return {\r\n        type: \"success\",\r\n        marks: [{ name: \"square_bracket\", position: startPos }].concat(result.marks),\r\n        position: pos + 1\r\n      };\r\n    }\r\n    case \"|\": {\r\n      pos = skipWS(str, pos + 1);\r\n      if (str[pos] === \"{\") {\r\n        let result = parseObject(str, pos);\r\n        if (result.type === \"error\")\r\n          return result;\r\n        result.marks.unshift({ name: \"projection\", position: startPos });\r\n        return result;\r\n      }\r\n      break;\r\n    }\r\n    case \"{\": {\r\n      let result = parseObject(str, pos);\r\n      if (result.type === \"error\")\r\n        return result;\r\n      result.marks.unshift({ name: \"projection\", position: startPos });\r\n      return result;\r\n    }\r\n  }\r\n  return { type: \"error\", position: pos };\r\n}\r\nfunction parseFuncCall(str, startPos, pos) {\r\n  let marks = [];\r\n  marks.push({ name: \"func_call\", position: startPos });\r\n  if (str[pos] === \":\" && str[pos + 1] === \":\") {\r\n    marks.push({ name: \"namespace\", position: startPos });\r\n    marks.push({ name: \"ident\", position: startPos }, { name: \"ident_end\", position: pos });\r\n    pos = skipWS(str, pos + 2);\r\n    let nameLen = parseRegex(str, pos, IDENT);\r\n    if (!nameLen)\r\n      return { type: \"error\", position: pos };\r\n    marks.push({ name: \"ident\", position: pos }, { name: \"ident_end\", position: pos + nameLen });\r\n    pos = skipWS(str, pos + nameLen);\r\n    if (str[pos] !== \"(\")\r\n      return { type: \"error\", position: pos };\r\n    pos++;\r\n  } else {\r\n    marks.push({ name: \"ident\", position: startPos }, { name: \"ident_end\", position: pos });\r\n    pos = skipWS(str, pos + 1);\r\n  }\r\n  let lastPos = pos;\r\n  if (str[pos] !== \")\") {\r\n    while (true) {\r\n      let result = parseExpr(str, pos, 0);\r\n      if (result.type === \"error\")\r\n        return result;\r\n      marks = marks.concat(result.marks);\r\n      lastPos = result.position;\r\n      pos = skipWS(str, result.position);\r\n      if (str[pos] !== \",\")\r\n        break;\r\n      pos = skipWS(str, pos + 1);\r\n      if (str[pos] === \")\")\r\n        break;\r\n    }\r\n  }\r\n  if (str[pos] !== \")\") {\r\n    return { type: \"error\", position: pos };\r\n  }\r\n  marks.push({ name: \"func_args_end\", position: lastPos });\r\n  return {\r\n    type: \"success\",\r\n    marks,\r\n    position: pos + 1\r\n  };\r\n}\r\nfunction parseObject(str, pos) {\r\n  let marks = [{ name: \"object\", position: pos }];\r\n  pos = skipWS(str, pos + 1);\r\n  while (str[pos] !== \"}\") {\r\n    let pairPos = pos;\r\n    if (str.slice(pos, pos + 3) === \"...\") {\r\n      pos = skipWS(str, pos + 3);\r\n      if (str[pos] !== \"}\" && str[pos] !== \",\") {\r\n        let expr = parseExpr(str, pos, 0);\r\n        if (expr.type === \"error\")\r\n          return expr;\r\n        marks.push({ name: \"object_splat\", position: pairPos });\r\n        marks = marks.concat(expr.marks);\r\n        pos = expr.position;\r\n      } else {\r\n        marks.push({ name: \"object_splat_this\", position: pairPos });\r\n      }\r\n    } else {\r\n      let expr = parseExpr(str, pos, 0);\r\n      if (expr.type === \"error\")\r\n        return expr;\r\n      let nextPos = skipWS(str, expr.position);\r\n      if (expr.marks[0].name === \"str\" && str[nextPos] === \":\") {\r\n        let value = parseExpr(str, skipWS(str, nextPos + 1), 0);\r\n        if (value.type === \"error\")\r\n          return value;\r\n        marks.push({ name: \"object_pair\", position: pairPos });\r\n        marks = marks.concat(expr.marks, value.marks);\r\n        pos = value.position;\r\n      } else {\r\n        marks = marks.concat({ name: \"object_expr\", position: pos }, expr.marks);\r\n        pos = expr.position;\r\n      }\r\n    }\r\n    pos = skipWS(str, pos);\r\n    if (str[pos] !== \",\")\r\n      break;\r\n    pos = skipWS(str, pos + 1);\r\n  }\r\n  if (str[pos] !== \"}\") {\r\n    return { type: \"error\", position: pos };\r\n  }\r\n  pos++;\r\n  marks.push({ name: \"object_end\", position: pos });\r\n  return { type: \"success\", marks, position: pos };\r\n}\r\nfunction parseString(str, pos) {\r\n  let token = str[pos];\r\n  pos = pos + 1;\r\n  const marks = [{ name: \"str\", position: pos }];\r\n  str:\r\n    for (; ; pos++) {\r\n      if (pos > str.length)\r\n        return { type: \"error\", position: pos };\r\n      switch (str[pos]) {\r\n        case token: {\r\n          marks.push({ name: \"str_end\", position: pos });\r\n          pos++;\r\n          break str;\r\n        }\r\n        case \"\\\\\": {\r\n          marks.push({ name: \"str_pause\", position: pos });\r\n          if (str[pos + 1] === \"u\") {\r\n            if (str[pos + 2] === \"{\") {\r\n              marks.push({ name: \"unicode_hex\", position: pos + 3 });\r\n              pos = str.indexOf(\"}\", pos + 3);\r\n              marks.push({ name: \"unicode_hex_end\", position: pos });\r\n              pos++;\r\n            } else {\r\n              marks.push({ name: \"unicode_hex\", position: pos + 2 });\r\n              marks.push({ name: \"unicode_hex_end\", position: pos + 6 });\r\n              pos += 5;\r\n            }\r\n          } else {\r\n            marks.push({ name: \"single_escape\", position: pos + 1 });\r\n            pos += 1;\r\n          }\r\n          marks.push({ name: \"str_start\", position: pos + 1 });\r\n        }\r\n      }\r\n    }\r\n  return { type: \"success\", marks, position: pos };\r\n}\r\nfunction skipWS(str, pos) {\r\n  return pos + parseRegex(str, pos, WS);\r\n}\r\nfunction parseRegex(str, pos, re) {\r\n  let m = re.exec(str.slice(pos));\r\n  return m ? m[0].length : 0;\r\n}\r\nfunction parseRegexStr(str, pos, re) {\r\n  let m = re.exec(str.slice(pos));\r\n  return m ? m[0] : null;\r\n}\r\nfunction join(a, b) {\r\n  return (base) => b(a(base));\r\n}\r\nfunction map(inner) {\r\n  return (base) => ({ type: \"Map\", base, expr: inner({ type: \"This\" }) });\r\n}\r\nfunction flatMap(inner) {\r\n  return (base) => ({ type: \"FlatMap\", base, expr: inner({ type: \"This\" }) });\r\n}\r\nfunction traverseArray(build, right) {\r\n  if (!right) {\r\n    return {\r\n      type: \"a-a\",\r\n      build\r\n    };\r\n  }\r\n  switch (right.type) {\r\n    case \"a-a\":\r\n      return {\r\n        type: \"a-a\",\r\n        build: join(build, right.build)\r\n      };\r\n    case \"a-b\":\r\n      return {\r\n        type: \"a-b\",\r\n        build: join(build, right.build)\r\n      };\r\n    case \"b-b\":\r\n      return {\r\n        type: \"a-a\",\r\n        build: join(build, map(right.build))\r\n      };\r\n    case \"b-a\":\r\n      return {\r\n        type: \"a-a\",\r\n        build: join(build, flatMap(right.build))\r\n      };\r\n    default:\r\n      throw new Error(`unknown type: ${right.type}`);\r\n  }\r\n}\r\nfunction traversePlain(mapper, right) {\r\n  if (!right) {\r\n    return {\r\n      type: \"b-b\",\r\n      build: mapper\r\n    };\r\n  }\r\n  switch (right.type) {\r\n    case \"a-a\":\r\n    case \"b-a\":\r\n      return {\r\n        type: \"b-a\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    case \"a-b\":\r\n    case \"b-b\":\r\n      return {\r\n        type: \"b-b\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    default:\r\n      throw new Error(`unknown type: ${right.type}`);\r\n  }\r\n}\r\nfunction traverseElement(mapper, right) {\r\n  if (!right) {\r\n    return {\r\n      type: \"a-b\",\r\n      build: mapper\r\n    };\r\n  }\r\n  switch (right.type) {\r\n    case \"a-a\":\r\n    case \"b-a\":\r\n      return {\r\n        type: \"a-a\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    case \"a-b\":\r\n    case \"b-b\":\r\n      return {\r\n        type: \"a-b\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    default:\r\n      throw new Error(`unknown type: ${right.type}`);\r\n  }\r\n}\r\nfunction traverseProjection(mapper, right) {\r\n  if (!right) {\r\n    return {\r\n      type: \"b-b\",\r\n      build: mapper\r\n    };\r\n  }\r\n  switch (right.type) {\r\n    case \"a-a\":\r\n      return {\r\n        type: \"a-a\",\r\n        build: join(map(mapper), right.build)\r\n      };\r\n    case \"a-b\":\r\n      return {\r\n        type: \"a-b\",\r\n        build: join(map(mapper), right.build)\r\n      };\r\n    case \"b-a\":\r\n      return {\r\n        type: \"b-a\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    case \"b-b\":\r\n      return {\r\n        type: \"b-b\",\r\n        build: join(mapper, right.build)\r\n      };\r\n    default:\r\n      throw new Error(`unknown type: ${right.type}`);\r\n  }\r\n}\r\nconst isEqual = equality;\r\nfunction equality(a, b) {\r\n  if (a.type === \"string\" && b.type === \"string\" || a.type === \"boolean\" && b.type === \"boolean\" || a.type === \"null\" && b.type === \"null\" || a.type === \"number\" && b.type === \"number\") {\r\n    return a.data === b.data;\r\n  }\r\n  if (a.type === \"datetime\" && b.type === \"datetime\") {\r\n    return a.data.equals(b.data);\r\n  }\r\n  return false;\r\n}\r\nconst operators = {\r\n  \"==\": function eq(left, right) {\r\n    return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  \"!=\": function neq(left, right) {\r\n    return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;\r\n  },\r\n  \">\": function gt(left, right) {\r\n    if (left.type === \"stream\" || right.type === \"stream\")\r\n      return NULL_VALUE;\r\n    const result = partialCompare(left.data, right.data);\r\n    if (result === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    return result > 0 ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  \">=\": function gte(left, right) {\r\n    if (left.type === \"stream\" || right.type === \"stream\")\r\n      return NULL_VALUE;\r\n    const result = partialCompare(left.data, right.data);\r\n    if (result === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    return result >= 0 ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  \"<\": function lt(left, right) {\r\n    if (left.type === \"stream\" || right.type === \"stream\")\r\n      return NULL_VALUE;\r\n    const result = partialCompare(left.data, right.data);\r\n    if (result === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    return result < 0 ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  \"<=\": function lte(left, right) {\r\n    if (left.type === \"stream\" || right.type === \"stream\")\r\n      return NULL_VALUE;\r\n    const result = partialCompare(left.data, right.data);\r\n    if (result === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    return result <= 0 ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  in: async function inop(left, right) {\r\n    if (right.type === \"path\") {\r\n      if (left.type !== \"string\") {\r\n        return NULL_VALUE;\r\n      }\r\n      return right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;\r\n    }\r\n    if (right.isArray()) {\r\n      for await (const b of right) {\r\n        if (isEqual(left, b)) {\r\n          return TRUE_VALUE;\r\n        }\r\n      }\r\n      return FALSE_VALUE;\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  match: async function match(left, right) {\r\n    let tokens = [];\r\n    let patterns = [];\r\n    await gatherText(left, (part) => {\r\n      tokens = tokens.concat(matchTokenize(part));\r\n    });\r\n    const didSucceed = await gatherText(right, (part) => {\r\n      patterns = patterns.concat(matchAnalyzePattern(part));\r\n    });\r\n    if (!didSucceed) {\r\n      return FALSE_VALUE;\r\n    }\r\n    const matched = matchText(tokens, patterns);\r\n    return matched ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  \"+\": function plus(left, right) {\r\n    if (left.type === \"datetime\" && right.type === \"number\") {\r\n      return fromDateTime(left.data.add(right.data));\r\n    }\r\n    if (left.type === \"number\" && right.type === \"number\") {\r\n      return fromNumber(left.data + right.data);\r\n    }\r\n    if (left.type === \"string\" && right.type === \"string\") {\r\n      return fromString(left.data + right.data);\r\n    }\r\n    if (left.type === \"object\" && right.type === \"object\") {\r\n      return fromJS(__spreadValues(__spreadValues({}, left.data), right.data));\r\n    }\r\n    if (left.type === \"array\" && right.type === \"array\") {\r\n      return fromJS(left.data.concat(right.data));\r\n    }\r\n    if (left.isArray() && right.isArray()) {\r\n      return new StreamValue(async function* () {\r\n        for await (const val of left) {\r\n          yield val;\r\n        }\r\n        for await (const val of right) {\r\n          yield val;\r\n        }\r\n      });\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  \"-\": function minus(left, right) {\r\n    if (left.type === \"datetime\" && right.type === \"number\") {\r\n      return fromDateTime(left.data.add(-right.data));\r\n    }\r\n    if (left.type === \"datetime\" && right.type === \"datetime\") {\r\n      return fromNumber(left.data.difference(right.data));\r\n    }\r\n    if (left.type === \"number\" && right.type === \"number\") {\r\n      return fromNumber(left.data - right.data);\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  \"*\": numericOperator((a, b) => a * b),\r\n  \"/\": numericOperator((a, b) => a / b),\r\n  \"%\": numericOperator((a, b) => a % b),\r\n  \"**\": numericOperator((a, b) => Math.pow(a, b))\r\n};\r\nfunction numericOperator(impl) {\r\n  return function(left, right) {\r\n    if (left.type === \"number\" && right.type === \"number\") {\r\n      const result = impl(left.data, right.data);\r\n      return fromNumber(result);\r\n    }\r\n    return NULL_VALUE;\r\n  };\r\n}\r\nclass Scope {\r\n  constructor(params, source, value, context, parent) {\r\n    this.isHidden = false;\r\n    this.params = params;\r\n    this.source = source;\r\n    this.value = value;\r\n    this.context = context;\r\n    this.parent = parent;\r\n  }\r\n  createNested(value) {\r\n    if (this.isHidden) {\r\n      return new Scope(this.params, this.source, value, this.context, this.parent);\r\n    }\r\n    return new Scope(this.params, this.source, value, this.context, this);\r\n  }\r\n  createHidden(value) {\r\n    const result = this.createNested(value);\r\n    result.isHidden = true;\r\n    return result;\r\n  }\r\n}\r\nfunction evaluate(node, scope, execute = evaluate) {\r\n  const func = EXECUTORS[node.type];\r\n  return func(node, scope, execute);\r\n}\r\nfunction promiselessApply(value, cb) {\r\n  if (\"then\" in value) {\r\n    return value.then(cb);\r\n  }\r\n  return cb(value);\r\n}\r\nconst EXECUTORS = {\r\n  This(_, scope) {\r\n    return scope.value;\r\n  },\r\n  Everything(_, scope) {\r\n    return scope.source;\r\n  },\r\n  Parameter({ name }, scope) {\r\n    return fromJS(scope.params[name]);\r\n  },\r\n  Context({ key }, scope) {\r\n    if (key === \"before\" || key === \"after\") {\r\n      const value = scope.context[key];\r\n      return value || NULL_VALUE;\r\n    }\r\n    throw new Error(`unknown context key: ${key}`);\r\n  },\r\n  Parent({ n }, scope) {\r\n    let current = scope;\r\n    for (let i = 0; i < n; i++) {\r\n      if (!current.parent) {\r\n        return NULL_VALUE;\r\n      }\r\n      current = current.parent;\r\n    }\r\n    return current.value;\r\n  },\r\n  OpCall({ op, left, right }, scope, execute) {\r\n    const func = operators[op];\r\n    if (!func) {\r\n      throw new Error(`Unknown operator: ${op}`);\r\n    }\r\n    const leftValue = execute(left, scope);\r\n    const rightValue = execute(right, scope);\r\n    if (\"then\" in leftValue || \"then\" in rightValue) {\r\n      return (async () => func(await leftValue, await rightValue))();\r\n    }\r\n    return func(leftValue, rightValue);\r\n  },\r\n  async Select({ alternatives, fallback }, scope, execute) {\r\n    for (const alt of alternatives) {\r\n      const altCond = await execute(alt.condition, scope);\r\n      if (altCond.type === \"boolean\" && altCond.data === true) {\r\n        return execute(alt.value, scope);\r\n      }\r\n    }\r\n    if (fallback) {\r\n      return execute(fallback, scope);\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  async InRange({ base, left, right, isInclusive }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    const leftValue = await execute(left, scope);\r\n    const rightValue = await execute(right, scope);\r\n    const leftCmp = partialCompare(await value.get(), await leftValue.get());\r\n    if (leftCmp === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    const rightCmp = partialCompare(await value.get(), await rightValue.get());\r\n    if (rightCmp === null) {\r\n      return NULL_VALUE;\r\n    }\r\n    if (isInclusive) {\r\n      return leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE;\r\n    }\r\n    return leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;\r\n  },\r\n  async Filter({ base, expr }, scope, execute) {\r\n    const baseValue = await execute(base, scope);\r\n    if (!baseValue.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    return new StreamValue(async function* () {\r\n      for await (const elem of baseValue) {\r\n        const newScope = scope.createNested(elem);\r\n        const exprValue = await execute(expr, newScope);\r\n        if (exprValue.type === \"boolean\" && exprValue.data === true) {\r\n          yield elem;\r\n        }\r\n      }\r\n    });\r\n  },\r\n  async Projection({ base, expr }, scope, execute) {\r\n    const baseValue = await execute(base, scope);\r\n    if (baseValue.type !== \"object\") {\r\n      return NULL_VALUE;\r\n    }\r\n    const newScope = scope.createNested(baseValue);\r\n    return execute(expr, newScope);\r\n  },\r\n  FuncCall({ func, args }, scope, execute) {\r\n    return func(args, scope, execute);\r\n  },\r\n  async PipeFuncCall({ func, base, args }, scope, execute) {\r\n    const baseValue = await execute(base, scope);\r\n    return func(baseValue, args, scope, execute);\r\n  },\r\n  async AccessAttribute({ base, name }, scope, execute) {\r\n    let value = scope.value;\r\n    if (base) {\r\n      value = await execute(base, scope);\r\n    }\r\n    if (value.type === \"object\") {\r\n      if (value.data.hasOwnProperty(name)) {\r\n        return fromJS(value.data[name]);\r\n      }\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  async AccessElement({ base, index }, scope, execute) {\r\n    const baseValue = await execute(base, scope);\r\n    if (!baseValue.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    const data = await baseValue.get();\r\n    const finalIndex = index < 0 ? index + data.length : index;\r\n    return fromJS(data[finalIndex]);\r\n  },\r\n  async Slice({ base, left, right, isInclusive }, scope, execute) {\r\n    const baseValue = await execute(base, scope);\r\n    if (!baseValue.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    const array = await baseValue.get();\r\n    let leftIdx = left;\r\n    let rightIdx = right;\r\n    if (leftIdx < 0) {\r\n      leftIdx = array.length + leftIdx;\r\n    }\r\n    if (rightIdx < 0) {\r\n      rightIdx = array.length + rightIdx;\r\n    }\r\n    if (isInclusive) {\r\n      rightIdx++;\r\n    }\r\n    if (leftIdx < 0) {\r\n      leftIdx = 0;\r\n    }\r\n    if (rightIdx < 0) {\r\n      rightIdx = 0;\r\n    }\r\n    return fromJS(array.slice(leftIdx, rightIdx));\r\n  },\r\n  async Deref({ base }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    if (!scope.source.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    if (value.type !== \"object\") {\r\n      return NULL_VALUE;\r\n    }\r\n    const id = value.data._ref;\r\n    if (typeof id !== \"string\") {\r\n      return NULL_VALUE;\r\n    }\r\n    for await (const doc of scope.source) {\r\n      if (doc.type === \"object\" && id === doc.data._id) {\r\n        return doc;\r\n      }\r\n    }\r\n    return NULL_VALUE;\r\n  },\r\n  Value({ value }) {\r\n    return fromJS(value);\r\n  },\r\n  Group({ base }, scope, execute) {\r\n    return execute(base, scope);\r\n  },\r\n  async Object({ attributes }, scope, execute) {\r\n    const result = {};\r\n    for (const attr of attributes) {\r\n      const attrType = attr.type;\r\n      switch (attr.type) {\r\n        case \"ObjectAttributeValue\": {\r\n          const value = await execute(attr.value, scope);\r\n          result[attr.name] = await value.get();\r\n          break;\r\n        }\r\n        case \"ObjectConditionalSplat\": {\r\n          const cond = await execute(attr.condition, scope);\r\n          if (cond.type !== \"boolean\" || cond.data === false) {\r\n            continue;\r\n          }\r\n          const value = await execute(attr.value, scope);\r\n          if (value.type === \"object\") {\r\n            Object.assign(result, value.data);\r\n          }\r\n          break;\r\n        }\r\n        case \"ObjectSplat\": {\r\n          const value = await execute(attr.value, scope);\r\n          if (value.type === \"object\") {\r\n            Object.assign(result, value.data);\r\n          }\r\n          break;\r\n        }\r\n        default:\r\n          throw new Error(`Unknown node type: ${attrType}`);\r\n      }\r\n    }\r\n    return fromJS(result);\r\n  },\r\n  Array({ elements }, scope, execute) {\r\n    return new StreamValue(async function* () {\r\n      for (const element of elements) {\r\n        const value = await execute(element.value, scope);\r\n        if (element.isSplat) {\r\n          if (value.isArray()) {\r\n            for await (const v of value) {\r\n              yield v;\r\n            }\r\n          }\r\n        } else {\r\n          yield value;\r\n        }\r\n      }\r\n    });\r\n  },\r\n  Tuple() {\r\n    throw new Error(\"tuples can not be evaluated\");\r\n  },\r\n  async Or({ left, right }, scope, execute) {\r\n    const leftValue = await execute(left, scope);\r\n    const rightValue = await execute(right, scope);\r\n    if (leftValue.type === \"boolean\") {\r\n      if (leftValue.data === true) {\r\n        return TRUE_VALUE;\r\n      }\r\n    }\r\n    if (rightValue.type === \"boolean\") {\r\n      if (rightValue.data === true) {\r\n        return TRUE_VALUE;\r\n      }\r\n    }\r\n    if (leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\") {\r\n      return NULL_VALUE;\r\n    }\r\n    return FALSE_VALUE;\r\n  },\r\n  async And({ left, right }, scope, execute) {\r\n    const leftValue = await execute(left, scope);\r\n    const rightValue = await execute(right, scope);\r\n    if (leftValue.type === \"boolean\") {\r\n      if (leftValue.data === false) {\r\n        return FALSE_VALUE;\r\n      }\r\n    }\r\n    if (rightValue.type === \"boolean\") {\r\n      if (rightValue.data === false) {\r\n        return FALSE_VALUE;\r\n      }\r\n    }\r\n    if (leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\") {\r\n      return NULL_VALUE;\r\n    }\r\n    return TRUE_VALUE;\r\n  },\r\n  async Not({ base }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    if (value.type !== \"boolean\") {\r\n      return NULL_VALUE;\r\n    }\r\n    return value.data ? FALSE_VALUE : TRUE_VALUE;\r\n  },\r\n  Neg({ base }, scope, execute) {\r\n    return promiselessApply(execute(base, scope), (value) => {\r\n      if (value.type !== \"number\") {\r\n        return NULL_VALUE;\r\n      }\r\n      return fromNumber(-value.data);\r\n    });\r\n  },\r\n  Pos({ base }, scope, execute) {\r\n    return promiselessApply(execute(base, scope), (value) => {\r\n      if (value.type !== \"number\") {\r\n        return NULL_VALUE;\r\n      }\r\n      return fromNumber(value.data);\r\n    });\r\n  },\r\n  Asc() {\r\n    return NULL_VALUE;\r\n  },\r\n  Desc() {\r\n    return NULL_VALUE;\r\n  },\r\n  async ArrayCoerce({ base }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    return value.isArray() ? value : NULL_VALUE;\r\n  },\r\n  async Map({ base, expr }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    if (!value.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    return new StreamValue(async function* () {\r\n      for await (const elem of value) {\r\n        const newScope = scope.createHidden(elem);\r\n        yield await execute(expr, newScope);\r\n      }\r\n    });\r\n  },\r\n  async FlatMap({ base, expr }, scope, execute) {\r\n    const value = await execute(base, scope);\r\n    if (!value.isArray()) {\r\n      return NULL_VALUE;\r\n    }\r\n    return new StreamValue(async function* () {\r\n      for await (const elem of value) {\r\n        const newScope = scope.createHidden(elem);\r\n        const innerValue = await execute(expr, newScope);\r\n        if (innerValue.isArray()) {\r\n          for await (const inner of innerValue) {\r\n            yield inner;\r\n          }\r\n        } else {\r\n          yield innerValue;\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\nfunction evaluateQuery(tree, options = {}) {\r\n  const root = fromJS(options.root);\r\n  const dataset = fromJS(options.dataset);\r\n  const params = __spreadValues({}, options.params);\r\n  const scope = new Scope(params, dataset, root, {\r\n    timestamp: options.timestamp || new Date(),\r\n    identity: options.identity === void 0 ? \"me\" : options.identity,\r\n    sanity: options.sanity,\r\n    after: options.after ? fromJS(options.after) : null,\r\n    before: options.before ? fromJS(options.before) : null\r\n  }, null);\r\n  return evaluate(tree, scope);\r\n}\r\nfunction canConstantEvaluate(node) {\r\n  switch (node.type) {\r\n    case \"Group\":\r\n    case \"Value\":\r\n    case \"Parameter\":\r\n    case \"Pos\":\r\n    case \"Neg\":\r\n      return true;\r\n    case \"OpCall\":\r\n      switch (node.op) {\r\n        case \"+\":\r\n        case \"-\":\r\n        case \"*\":\r\n        case \"/\":\r\n        case \"%\":\r\n        case \"**\":\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nconst DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, { timestamp: new Date(0), identity: \"me\", before: null, after: null }, null);\r\nclass ConstantEvaluateError extends Error {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.name = \"ConstantEvaluateError\";\r\n  }\r\n}\r\nfunction tryConstantEvaluate(node) {\r\n  try {\r\n    return constantEvaluate(node);\r\n  } catch (err) {\r\n    if (err.name === \"ConstantEvaluateError\") {\r\n      return null;\r\n    }\r\n    throw err;\r\n  }\r\n}\r\nfunction constantEvaluate(node) {\r\n  if (!canConstantEvaluate(node)) {\r\n    throw new ConstantEvaluateError(\"cannot constant evaluate\");\r\n  }\r\n  const value = evaluate(node, DUMMY_SCOPE, constantEvaluate);\r\n  if (\"then\" in value) {\r\n    throw new Error(\"BUG: constant evaluate should never return a promise\");\r\n  }\r\n  return value;\r\n}\r\nconst ESCAPE_SEQUENCE = {\r\n  \"'\": \"'\",\r\n  '\"': '\"',\r\n  \"\\\\\": \"\\\\\",\r\n  \"/\": \"/\",\r\n  b: \"\\b\",\r\n  f: \"\\f\",\r\n  n: \"\\n\",\r\n  r: \"\\r\",\r\n  t: \"\t\"\r\n};\r\nfunction expandHex(str) {\r\n  const charCode = parseInt(str, 16);\r\n  return String.fromCharCode(charCode);\r\n}\r\nclass GroqQueryError extends Error {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.name = \"GroqQueryError\";\r\n  }\r\n}\r\nconst EXPR_BUILDER = {\r\n  group(p) {\r\n    const inner = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Group\",\r\n      base: inner\r\n    };\r\n  },\r\n  everything() {\r\n    return { type: \"Everything\" };\r\n  },\r\n  this() {\r\n    return { type: \"This\" };\r\n  },\r\n  parent() {\r\n    return {\r\n      type: \"Parent\",\r\n      n: 1\r\n    };\r\n  },\r\n  dblparent(p) {\r\n    const next = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Parent\",\r\n      n: next.n + 1\r\n    };\r\n  },\r\n  traverse(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    const traversalList = [];\r\n    while (p.getMark().name !== \"traversal_end\") {\r\n      traversalList.push(p.process(TRAVERSE_BUILDER));\r\n    }\r\n    p.shift();\r\n    let traversal = null;\r\n    for (let i = traversalList.length - 1; i >= 0; i--) {\r\n      traversal = traversalList[i](traversal);\r\n    }\r\n    if (base.type === \"Everything\" || base.type === \"Array\" || base.type === \"PipeFuncCall\") {\r\n      traversal = traverseArray((val) => val, traversal);\r\n    }\r\n    if (traversal === null)\r\n      throw new Error(\"BUG: unexpected empty traversal\");\r\n    return traversal.build(base);\r\n  },\r\n  this_attr(p) {\r\n    const name = p.processString();\r\n    if (name === \"null\") {\r\n      return { type: \"Value\", value: null };\r\n    }\r\n    if (name === \"true\") {\r\n      return { type: \"Value\", value: true };\r\n    }\r\n    if (name === \"false\") {\r\n      return { type: \"Value\", value: false };\r\n    }\r\n    return {\r\n      type: \"AccessAttribute\",\r\n      name\r\n    };\r\n  },\r\n  neg(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Neg\",\r\n      base\r\n    };\r\n  },\r\n  pos(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Pos\",\r\n      base\r\n    };\r\n  },\r\n  add(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"+\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  sub(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"-\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  mul(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"*\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  div(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"/\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  mod(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"%\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  pow(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op: \"**\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  comp(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const op = p.processString();\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"OpCall\",\r\n      op,\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  in_range(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    const isInclusive = p.getMark().name === \"inc_range\";\r\n    p.shift();\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"InRange\",\r\n      base,\r\n      left,\r\n      right,\r\n      isInclusive\r\n    };\r\n  },\r\n  str(p) {\r\n    let value = \"\";\r\n    loop:\r\n      while (p.hasMark()) {\r\n        const mark = p.getMark();\r\n        switch (mark.name) {\r\n          case \"str_end\":\r\n            value += p.processStringEnd();\r\n            break loop;\r\n          case \"str_pause\":\r\n            value += p.processStringEnd();\r\n            break;\r\n          case \"str_start\":\r\n            p.shift();\r\n            break;\r\n          case \"single_escape\": {\r\n            const char = p.slice(1);\r\n            p.shift();\r\n            value += ESCAPE_SEQUENCE[char];\r\n            break;\r\n          }\r\n          case \"unicode_hex\":\r\n            p.shift();\r\n            value += expandHex(p.processStringEnd());\r\n            break;\r\n          default:\r\n            throw new Error(`unexpected mark: ${mark.name}`);\r\n        }\r\n      }\r\n    return { type: \"Value\", value };\r\n  },\r\n  integer(p) {\r\n    const strValue = p.processStringEnd();\r\n    return {\r\n      type: \"Value\",\r\n      value: Number(strValue)\r\n    };\r\n  },\r\n  float(p) {\r\n    const strValue = p.processStringEnd();\r\n    return {\r\n      type: \"Value\",\r\n      value: Number(strValue)\r\n    };\r\n  },\r\n  sci(p) {\r\n    const strValue = p.processStringEnd();\r\n    return {\r\n      type: \"Value\",\r\n      value: Number(strValue)\r\n    };\r\n  },\r\n  object(p) {\r\n    const attributes = [];\r\n    while (p.getMark().name !== \"object_end\") {\r\n      attributes.push(p.process(OBJECT_BUILDER));\r\n    }\r\n    p.shift();\r\n    return {\r\n      type: \"Object\",\r\n      attributes\r\n    };\r\n  },\r\n  array(p) {\r\n    const elements = [];\r\n    while (p.getMark().name !== \"array_end\") {\r\n      let isSplat = false;\r\n      if (p.getMark().name === \"array_splat\") {\r\n        isSplat = true;\r\n        p.shift();\r\n      }\r\n      const value = p.process(EXPR_BUILDER);\r\n      elements.push({\r\n        type: \"ArrayElement\",\r\n        value,\r\n        isSplat\r\n      });\r\n    }\r\n    p.shift();\r\n    return {\r\n      type: \"Array\",\r\n      elements\r\n    };\r\n  },\r\n  tuple(p) {\r\n    const members = [];\r\n    while (p.getMark().name !== \"tuple_end\") {\r\n      members.push(p.process(EXPR_BUILDER));\r\n    }\r\n    p.shift();\r\n    return {\r\n      type: \"Tuple\",\r\n      members\r\n    };\r\n  },\r\n  func_call(p) {\r\n    let namespace = \"global\";\r\n    if (p.getMark().name === \"namespace\") {\r\n      p.shift();\r\n      namespace = p.processString();\r\n    }\r\n    const name = p.processString();\r\n    if (namespace === \"global\" && name === \"select\") {\r\n      const result = {\r\n        type: \"Select\",\r\n        alternatives: []\r\n      };\r\n      while (p.getMark().name !== \"func_args_end\") {\r\n        if (p.getMark().name === \"pair\") {\r\n          if (result.fallback)\r\n            throw new GroqQueryError(`unexpected argument to select()`);\r\n          p.shift();\r\n          const condition = p.process(EXPR_BUILDER);\r\n          const value = p.process(EXPR_BUILDER);\r\n          result.alternatives.push({\r\n            type: \"SelectAlternative\",\r\n            condition,\r\n            value\r\n          });\r\n        } else {\r\n          if (result.fallback)\r\n            throw new GroqQueryError(`unexpected argument to select()`);\r\n          const value = p.process(EXPR_BUILDER);\r\n          result.fallback = value;\r\n        }\r\n      }\r\n      p.shift();\r\n      return result;\r\n    }\r\n    const args = [];\r\n    while (p.getMark().name !== \"func_args_end\") {\r\n      args.push(p.process(EXPR_BUILDER));\r\n    }\r\n    p.shift();\r\n    if (namespace === \"global\" && (name === \"before\" || name === \"after\")) {\r\n      if (p.parseOptions.mode === \"delta\") {\r\n        return {\r\n          type: \"Context\",\r\n          key: name\r\n        };\r\n      }\r\n    }\r\n    if (namespace === \"global\" && name === \"boost\" && !p.allowBoost)\r\n      throw new GroqQueryError(\"unexpected boost\");\r\n    const funcs = namespaces[namespace];\r\n    if (!funcs) {\r\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`);\r\n    }\r\n    const func = funcs[name];\r\n    if (!func) {\r\n      throw new GroqQueryError(`Undefined function: ${name}`);\r\n    }\r\n    if (func.arity !== void 0) {\r\n      validateArity(name, func.arity, args.length);\r\n    }\r\n    if (func.mode !== void 0 && func.mode !== p.parseOptions.mode) {\r\n      throw new GroqQueryError(`Undefined function: ${name}`);\r\n    }\r\n    return {\r\n      type: \"FuncCall\",\r\n      func,\r\n      name,\r\n      args\r\n    };\r\n  },\r\n  pipecall(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    p.shift();\r\n    let namespace = \"global\";\r\n    if (p.getMark().name === \"namespace\") {\r\n      p.shift();\r\n      namespace = p.processString();\r\n    }\r\n    if (namespace !== \"global\") {\r\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`);\r\n    }\r\n    const name = p.processString();\r\n    const args = [];\r\n    const oldAllowBoost = p.allowBoost;\r\n    if (name === \"score\") {\r\n      p.allowBoost = true;\r\n    }\r\n    for (; ; ) {\r\n      const markName = p.getMark().name;\r\n      if (markName === \"func_args_end\") {\r\n        break;\r\n      }\r\n      if (name === \"order\") {\r\n        if (markName === \"asc\") {\r\n          p.shift();\r\n          args.push({ type: \"Asc\", base: p.process(EXPR_BUILDER) });\r\n          continue;\r\n        } else if (markName === \"desc\") {\r\n          p.shift();\r\n          args.push({ type: \"Desc\", base: p.process(EXPR_BUILDER) });\r\n          continue;\r\n        }\r\n      }\r\n      args.push(p.process(EXPR_BUILDER));\r\n    }\r\n    p.shift();\r\n    p.allowBoost = oldAllowBoost;\r\n    const func = pipeFunctions[name];\r\n    if (!func) {\r\n      throw new GroqQueryError(`Undefined pipe function: ${name}`);\r\n    }\r\n    if (func.arity) {\r\n      validateArity(name, func.arity, args.length);\r\n    }\r\n    return {\r\n      type: \"PipeFuncCall\",\r\n      func,\r\n      base,\r\n      name,\r\n      args\r\n    };\r\n  },\r\n  pair(p) {\r\n    throw new GroqQueryError(`unexpected =>`);\r\n  },\r\n  and(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"And\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  or(p) {\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Or\",\r\n      left,\r\n      right\r\n    };\r\n  },\r\n  not(p) {\r\n    const base = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"Not\",\r\n      base\r\n    };\r\n  },\r\n  asc(p) {\r\n    throw new GroqQueryError(\"unexpected asc\");\r\n  },\r\n  desc(p) {\r\n    throw new GroqQueryError(\"unexpected desc\");\r\n  },\r\n  param(p) {\r\n    const name = p.processString();\r\n    if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {\r\n      return {\r\n        type: \"Value\",\r\n        value: p.parseOptions.params[name]\r\n      };\r\n    }\r\n    return {\r\n      type: \"Parameter\",\r\n      name\r\n    };\r\n  }\r\n};\r\nconst OBJECT_BUILDER = {\r\n  object_expr(p) {\r\n    if (p.getMark().name === \"pair\") {\r\n      p.shift();\r\n      const condition = p.process(EXPR_BUILDER);\r\n      const value2 = p.process(EXPR_BUILDER);\r\n      return {\r\n        type: \"ObjectConditionalSplat\",\r\n        condition,\r\n        value: value2\r\n      };\r\n    }\r\n    const value = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"ObjectAttributeValue\",\r\n      name: extractPropertyKey(value),\r\n      value\r\n    };\r\n  },\r\n  object_pair(p) {\r\n    const name = p.process(EXPR_BUILDER);\r\n    if (name.type !== \"Value\")\r\n      throw new Error(\"name must be string\");\r\n    const value = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"ObjectAttributeValue\",\r\n      name: name.value,\r\n      value\r\n    };\r\n  },\r\n  object_splat(p) {\r\n    const value = p.process(EXPR_BUILDER);\r\n    return {\r\n      type: \"ObjectSplat\",\r\n      value\r\n    };\r\n  },\r\n  object_splat_this() {\r\n    return {\r\n      type: \"ObjectSplat\",\r\n      value: { type: \"This\" }\r\n    };\r\n  }\r\n};\r\nconst TRAVERSE_BUILDER = {\r\n  square_bracket(p) {\r\n    const expr = p.process(EXPR_BUILDER);\r\n    const value = tryConstantEvaluate(expr);\r\n    if (value && value.type === \"number\") {\r\n      return (right) => traverseElement((base) => ({ type: \"AccessElement\", base, index: value.data }), right);\r\n    }\r\n    if (value && value.type === \"string\") {\r\n      return (right) => traversePlain((base) => ({ type: \"AccessAttribute\", base, name: value.data }), right);\r\n    }\r\n    return (right) => traverseArray((base) => ({\r\n      type: \"Filter\",\r\n      base,\r\n      expr\r\n    }), right);\r\n  },\r\n  slice(p) {\r\n    const isInclusive = p.getMark().name === \"inc_range\";\r\n    p.shift();\r\n    const left = p.process(EXPR_BUILDER);\r\n    const right = p.process(EXPR_BUILDER);\r\n    const leftValue = tryConstantEvaluate(left);\r\n    const rightValue = tryConstantEvaluate(right);\r\n    if (!leftValue || !rightValue || leftValue.type !== \"number\" || rightValue.type !== \"number\") {\r\n      throw new GroqQueryError(\"slicing must use constant numbers\");\r\n    }\r\n    return (rhs) => traverseArray((base) => ({\r\n      type: \"Slice\",\r\n      base,\r\n      left: leftValue.data,\r\n      right: rightValue.data,\r\n      isInclusive\r\n    }), rhs);\r\n  },\r\n  projection(p) {\r\n    const obj = p.process(EXPR_BUILDER);\r\n    return (right) => traverseProjection((base) => ({ type: \"Projection\", base, expr: obj }), right);\r\n  },\r\n  attr_access(p) {\r\n    const name = p.processString();\r\n    return (right) => traversePlain((base) => ({ type: \"AccessAttribute\", base, name }), right);\r\n  },\r\n  deref(p) {\r\n    let attr = null;\r\n    if (p.getMark().name === \"deref_attr\") {\r\n      p.shift();\r\n      attr = p.processString();\r\n    }\r\n    const wrap = (base) => attr ? { type: \"AccessAttribute\", base, name: attr } : base;\r\n    return (right) => traversePlain((base) => wrap({\r\n      type: \"Deref\",\r\n      base\r\n    }), right);\r\n  },\r\n  array_postfix(p) {\r\n    return (right) => traverseArray((base) => ({ type: \"ArrayCoerce\", base }), right);\r\n  }\r\n};\r\nfunction extractPropertyKey(node) {\r\n  if (node.type === \"AccessAttribute\" && !node.base) {\r\n    return node.name;\r\n  }\r\n  if (node.type === \"Deref\" || node.type === \"Map\" || node.type === \"Projection\" || node.type === \"Slice\" || node.type === \"Filter\" || node.type === \"AccessElement\" || node.type === \"ArrayCoerce\") {\r\n    return extractPropertyKey(node.base);\r\n  }\r\n  throw new GroqQueryError(`Cannot determine property key for type: ${node.type}`);\r\n}\r\nfunction validateArity(name, arity, count2) {\r\n  if (typeof arity === \"number\") {\r\n    if (count2 !== arity) {\r\n      throw new GroqQueryError(`Incorrect number of arguments to function ${name}(). Expected ${arity}, got ${count2}.`);\r\n    }\r\n  } else if (arity) {\r\n    if (!arity(count2)) {\r\n      throw new GroqQueryError(`Incorrect number of arguments to function ${name}().`);\r\n    }\r\n  }\r\n}\r\nclass GroqSyntaxError extends Error {\r\n  constructor(position) {\r\n    super(`Syntax error in GROQ query at position ${position}`);\r\n    this.name = \"GroqSyntaxError\";\r\n    this.position = position;\r\n  }\r\n}\r\nfunction parse(input, options = {}) {\r\n  const result = parse$1(input);\r\n  if (result.type === \"error\") {\r\n    throw new GroqSyntaxError(result.position);\r\n  }\r\n  const processor = new MarkProcessor(input, result.marks, options);\r\n  return processor.process(EXPR_BUILDER);\r\n}\r\n\r\n//# sourceMappingURL=groq-js.esm.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/groq-js/dist/groq-js.esm.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/incremental-patcher.js":
/*!*************************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/incremental-patcher.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; },\n/* harmony export */   \"getType\": function() { return /* binding */ getType; },\n/* harmony export */   \"rebaseValue\": function() { return /* binding */ rebaseValue; },\n/* harmony export */   \"unwrap\": function() { return /* binding */ unwrap; },\n/* harmony export */   \"wrap\": function() { return /* binding */ wrap; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\r\n\r\nvar Model = /** @class */ (function () {\r\n    function Model(meta) {\r\n        this.meta = meta;\r\n    }\r\n    Model.prototype.wrap = function (data) {\r\n        return this.wrapWithMeta(data, this.meta, this.meta);\r\n    };\r\n    Model.prototype.wrapWithMeta = function (data, startMeta, endMeta) {\r\n        if (endMeta === void 0) { endMeta = this.meta; }\r\n        return { data: data, startMeta: startMeta, endMeta: endMeta };\r\n    };\r\n    Model.prototype.asObject = function (value) {\r\n        if (!value.content) {\r\n            var fields = {};\r\n            for (var _i = 0, _a = Object.entries(value.data); _i < _a.length; _i++) {\r\n                var _b = _a[_i], key = _b[0], val = _b[1];\r\n                fields[key] = this.wrapWithMeta(val, value.startMeta);\r\n            }\r\n            value.content = { type: 'object', fields: fields };\r\n        }\r\n        return value.content;\r\n    };\r\n    Model.prototype.asArray = function (value) {\r\n        var _this = this;\r\n        if (!value.content) {\r\n            var elements = value.data.map(function (item) { return _this.wrapWithMeta(item, value.startMeta); });\r\n            var metas = elements.map(function () { return _this.meta; });\r\n            value.content = { type: 'array', elements: elements, metas: metas };\r\n        }\r\n        return value.content;\r\n    };\r\n    Model.prototype.asString = function (value) {\r\n        if (!value.content) {\r\n            var str = value.data;\r\n            var part = {\r\n                value: str,\r\n                utf8size: (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(str),\r\n                uses: [],\r\n                startMeta: value.startMeta,\r\n                endMeta: value.endMeta\r\n            };\r\n            value.content = this.stringFromParts([part]);\r\n        }\r\n        return value.content;\r\n    };\r\n    Model.prototype.stringFromParts = function (parts) {\r\n        var str = {\r\n            type: 'string',\r\n            parts: parts\r\n        };\r\n        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\r\n            var part = parts_1[_i];\r\n            part.uses.push(str);\r\n        }\r\n        return str;\r\n    };\r\n    Model.prototype.objectGetKeys = function (value) {\r\n        if (value.content) {\r\n            return Object.keys(value.content.fields);\r\n        }\r\n        else {\r\n            return Object.keys(value.data);\r\n        }\r\n    };\r\n    Model.prototype.objectGetField = function (value, key) {\r\n        var obj = this.asObject(value);\r\n        return obj.fields[key];\r\n    };\r\n    Model.prototype.arrayGetElement = function (value, idx) {\r\n        var arr = this.asArray(value);\r\n        return arr.elements[idx];\r\n    };\r\n    Model.prototype.finalize = function (content) {\r\n        this.updateEndMeta(content);\r\n        return { content: content, startMeta: this.meta, endMeta: this.meta };\r\n    };\r\n    Model.prototype.markChanged = function (value) {\r\n        return this.wrap(unwrap(value));\r\n    };\r\n    Model.prototype.updateEndMeta = function (content) {\r\n        if (content.type == 'string') {\r\n            for (var _i = 0, _a = content.parts; _i < _a.length; _i++) {\r\n                var part = _a[_i];\r\n                part.endMeta = this.meta;\r\n            }\r\n        }\r\n        else {\r\n            if (content.type === 'array') {\r\n                for (var _b = 0, _c = content.elements; _b < _c.length; _b++) {\r\n                    var val = _c[_b];\r\n                    if (val.content && val.endMeta !== this.meta) {\r\n                        this.updateEndMeta(val.content);\r\n                    }\r\n                    val.endMeta = this.meta;\r\n                }\r\n            }\r\n            else {\r\n                for (var _d = 0, _e = Object.values(content.fields); _d < _e.length; _d++) {\r\n                    var val = _e[_d];\r\n                    if (val.content && val.endMeta !== this.meta) {\r\n                        this.updateEndMeta(val.content);\r\n                    }\r\n                    val.endMeta = this.meta;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Model.prototype.copyString = function (value) {\r\n        if (value) {\r\n            var other = this.asString(value);\r\n            return this.stringFromParts(other.parts.slice());\r\n        }\r\n        else {\r\n            return {\r\n                type: 'string',\r\n                parts: []\r\n            };\r\n        }\r\n    };\r\n    Model.prototype.copyObject = function (value) {\r\n        var obj = {\r\n            type: 'object',\r\n            fields: {}\r\n        };\r\n        if (value) {\r\n            var other = this.asObject(value);\r\n            Object.assign(obj.fields, other.fields);\r\n        }\r\n        return obj;\r\n    };\r\n    Model.prototype.copyArray = function (value) {\r\n        var arr = value ? this.asArray(value) : null;\r\n        var elements = arr ? arr.elements : [];\r\n        var metas = arr ? arr.metas : [];\r\n        return {\r\n            type: 'array',\r\n            elements: elements,\r\n            metas: metas\r\n        };\r\n    };\r\n    Model.prototype.objectSetField = function (target, key, value) {\r\n        target.fields[key] = value;\r\n    };\r\n    Model.prototype.objectDeleteField = function (target, key) {\r\n        delete target.fields[key];\r\n    };\r\n    Model.prototype.arrayAppendValue = function (target, value) {\r\n        target.elements.push(value);\r\n        target.metas.push(this.meta);\r\n    };\r\n    Model.prototype.arrayAppendSlice = function (target, source, left, right) {\r\n        var _a, _b;\r\n        var arr = this.asArray(source);\r\n        var samePosition = arr.elements.length === left;\r\n        (_a = target.elements).push.apply(_a, arr.elements.slice(left, right));\r\n        if (samePosition) {\r\n            (_b = target.metas).push.apply(_b, arr.metas.slice(left, right));\r\n        }\r\n        else {\r\n            for (var i = left; i < right; i++) {\r\n                target.metas.push(this.meta);\r\n            }\r\n        }\r\n    };\r\n    Model.prototype.stringAppendValue = function (target, value) {\r\n        var str = this.asString(value);\r\n        for (var _i = 0, _a = str.parts; _i < _a.length; _i++) {\r\n            var part = _a[_i];\r\n            this.stringAppendPart(target, part);\r\n        }\r\n    };\r\n    Model.prototype.stringAppendPart = function (target, part) {\r\n        target.parts.push(part);\r\n        part.uses.push(target);\r\n    };\r\n    Model.prototype.resolveStringPart = function (str, from, len) {\r\n        if (len === 0)\r\n            return from;\r\n        for (var i = from; i < str.parts.length; i++) {\r\n            var part = str.parts[i];\r\n            if (len === part.utf8size) {\r\n                // Matches perfect!\r\n                return i + 1;\r\n            }\r\n            if (len < part.utf8size) {\r\n                // It's a part of this chunk. We now need to split it up.\r\n                this.splitString(part, len);\r\n                return i + 1;\r\n            }\r\n            len -= part.utf8size;\r\n        }\r\n        throw new Error('splitting string out of bounds');\r\n    };\r\n    Model.prototype.splitString = function (part, idx) {\r\n        var leftValue;\r\n        var rightValue;\r\n        var leftSize = idx;\r\n        var rightSize = part.utf8size - leftSize;\r\n        // idx is here in UTF-8 index, not codepoint index.\r\n        // This means we might to adjust for multi-byte characters.\r\n        if (part.utf8size !== part.value.length) {\r\n            var byteCount = 0;\r\n            for (idx = 0; byteCount < leftSize; idx++) {\r\n                var code = part.value.codePointAt(idx);\r\n                var size = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8charSize)(code);\r\n                if (size === 4)\r\n                    idx++; // Surrogate pair.\r\n                byteCount += size;\r\n            }\r\n        }\r\n        leftValue = part.value.slice(0, idx);\r\n        rightValue = part.value.slice(idx);\r\n        var newPart = {\r\n            value: rightValue,\r\n            utf8size: rightSize,\r\n            uses: part.uses.slice(),\r\n            startMeta: part.startMeta,\r\n            endMeta: part.endMeta\r\n        };\r\n        part.value = leftValue;\r\n        part.utf8size = leftSize;\r\n        for (var _i = 0, _a = part.uses; _i < _a.length; _i++) {\r\n            var use = _a[_i];\r\n            // Insert the new part.\r\n            var idx_1 = use.parts.indexOf(part);\r\n            if (idx_1 === -1)\r\n                throw new Error('bug: mismatch between string parts and use.');\r\n            use.parts.splice(idx_1 + 1, 0, newPart);\r\n        }\r\n    };\r\n    Model.prototype.stringAppendSlice = function (target, source, left, right) {\r\n        var str = this.asString(source);\r\n        var firstPart = this.resolveStringPart(str, 0, left);\r\n        var lastPart = this.resolveStringPart(str, firstPart, right - left);\r\n        for (var i = firstPart; i < lastPart; i++) {\r\n            var part = str.parts[i];\r\n            this.stringAppendPart(target, part);\r\n        }\r\n    };\r\n    return Model;\r\n}());\r\n// Turns a native JavaScript object into a Value with a given origin.\r\nfunction wrap(data, meta) {\r\n    return { data: data, startMeta: meta, endMeta: meta };\r\n}\r\n// Converts a Value into a native JavaScript type.\r\nfunction unwrap(value) {\r\n    if (typeof value.data !== 'undefined')\r\n        return value.data;\r\n    var result;\r\n    var content = value.content;\r\n    switch (content.type) {\r\n        case 'string':\r\n            result = content.parts.map(function (part) { return part.value; }).join('');\r\n            break;\r\n        case 'array':\r\n            result = content.elements.map(function (val) { return unwrap(val); });\r\n            break;\r\n        case 'object': {\r\n            result = {};\r\n            for (var _i = 0, _a = Object.entries(content.fields); _i < _a.length; _i++) {\r\n                var _b = _a[_i], key = _b[0], val = _b[1];\r\n                result[key] = unwrap(val);\r\n            }\r\n        }\r\n    }\r\n    value.data = result;\r\n    return result;\r\n}\r\n// Returns the type of a Value.\r\nfunction getType(value) {\r\n    if (value.content)\r\n        return value.content.type;\r\n    if (Array.isArray(value.data))\r\n        return 'array';\r\n    if (value.data === null)\r\n        return 'null';\r\n    return typeof value.data;\r\n}\r\n// Updates the `right` value such that it reuses as much as possible from the `left` value.\r\nfunction rebaseValue(left, right) {\r\n    var leftType = getType(left);\r\n    var rightType = getType(right);\r\n    if (leftType !== rightType)\r\n        return right;\r\n    var leftModel = new Model(left.endMeta);\r\n    var rightModel = new Model(right.endMeta);\r\n    switch (leftType) {\r\n        case 'object': {\r\n            var leftObj = leftModel.asObject(left);\r\n            var rightObj = rightModel.asObject(right);\r\n            // Number of fields which are identical in left and right.\r\n            var identicalFieldCount = 0;\r\n            var leftFieldCount = Object.keys(leftObj.fields).length;\r\n            var rightFieldCount = Object.keys(rightObj.fields).length;\r\n            for (var _i = 0, _a = Object.entries(rightObj.fields); _i < _a.length; _i++) {\r\n                var _b = _a[_i], key = _b[0], rightVal = _b[1];\r\n                var leftVal = leftObj.fields[key];\r\n                if (leftVal) {\r\n                    rightObj.fields[key] = rebaseValue(leftVal, rightVal);\r\n                    if (rightObj.fields[key] === leftVal) {\r\n                        identicalFieldCount++;\r\n                    }\r\n                }\r\n            }\r\n            var isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount;\r\n            return isIdentical ? left : right;\r\n        }\r\n        case 'array': {\r\n            var leftArr = leftModel.asArray(left);\r\n            var rightArr = rightModel.asArray(right);\r\n            if (leftArr.elements.length !== rightArr.elements.length) {\r\n                break;\r\n            }\r\n            var numRebased = 0;\r\n            for (var i = 0; i < rightArr.elements.length; i++) {\r\n                rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]);\r\n                if (rightArr.elements[i] !== leftArr.elements[i]) {\r\n                    numRebased++;\r\n                }\r\n            }\r\n            return numRebased === 0 ? left : right;\r\n        }\r\n        case 'null':\r\n        case 'boolean':\r\n        case 'number': {\r\n            if (unwrap(left) === unwrap(right))\r\n                return left;\r\n            break;\r\n        }\r\n        case 'string': {\r\n            var leftRaw = unwrap(left);\r\n            var rightRaw = unwrap(right);\r\n            if (leftRaw === rightRaw)\r\n                return left;\r\n            var result = rightModel.copyString(null);\r\n            var prefix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonPrefix)(leftRaw, rightRaw);\r\n            var suffix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonSuffix)(leftRaw, rightRaw, prefix);\r\n            var rightLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(rightRaw);\r\n            var leftLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(leftRaw);\r\n            if (0 < prefix) {\r\n                rightModel.stringAppendSlice(result, left, 0, prefix);\r\n            }\r\n            if (prefix < rightLen - suffix) {\r\n                rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix);\r\n            }\r\n            if (leftLen - suffix < leftLen) {\r\n                rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\r\n            }\r\n            var value = rightModel.finalize(result);\r\n            if (unwrap(value) !== rightRaw)\r\n                throw new Error('incorrect string rebase');\r\n            return value;\r\n        }\r\n    }\r\n    return right;\r\n}\r\nfunction applyPatch(left, patch, startMeta) {\r\n    var model = new Model(startMeta);\r\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(model, left, patch);\r\n    return patcher.process();\r\n}\r\n//# sourceMappingURL=incremental-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL2luY3JlbWVudGFsLXBhdGNoZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE2QztBQUNxQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxnQkFBZ0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxtREFBbUQ7QUFDL0csbURBQW1ELG9CQUFvQjtBQUN2RSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxxQkFBcUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxnQkFBZ0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxnQkFBZ0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsV0FBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0JBQXNCO0FBQ2hEO0FBQ0EsMkJBQTJCLG1EQUFZO0FBQ3ZDO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxjQUFjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsb0JBQW9CO0FBQzdFO0FBQ0E7QUFDQSwyREFBMkQscUJBQXFCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQkFBZ0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsZ0JBQWdCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhCQUE4QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1EQUFZO0FBQ3JDLHlCQUF5QixtREFBWTtBQUNyQywyQkFBMkIscURBQWM7QUFDekMsMEJBQTBCLHFEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esc0JBQXNCLHNEQUFPO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL2luY3JlbWVudGFsLXBhdGNoZXIuanM/ZTZmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXRjaGVyIH0gZnJvbSAnLi9pbnRlcm5hbC1wYXRjaGVyJztcclxuaW1wb3J0IHsgdXRmOGNoYXJTaXplLCB1dGY4c3RyaW5nU2l6ZSwgY29tbW9uUHJlZml4LCBjb21tb25TdWZmaXggfSBmcm9tICcuL3V0ZjgnO1xyXG52YXIgTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNb2RlbChtZXRhKSB7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIE1vZGVsLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwV2l0aE1ldGEoZGF0YSwgdGhpcy5tZXRhLCB0aGlzLm1ldGEpO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS53cmFwV2l0aE1ldGEgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnRNZXRhLCBlbmRNZXRhKSB7XHJcbiAgICAgICAgaWYgKGVuZE1ldGEgPT09IHZvaWQgMCkgeyBlbmRNZXRhID0gdGhpcy5tZXRhOyB9XHJcbiAgICAgICAgcmV0dXJuIHsgZGF0YTogZGF0YSwgc3RhcnRNZXRhOiBzdGFydE1ldGEsIGVuZE1ldGE6IGVuZE1ldGEgfTtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUuYXNPYmplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAoIXZhbHVlLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmVudHJpZXModmFsdWUuZGF0YSk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWwgPSBfYlsxXTtcclxuICAgICAgICAgICAgICAgIGZpZWxkc1trZXldID0gdGhpcy53cmFwV2l0aE1ldGEodmFsLCB2YWx1ZS5zdGFydE1ldGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhbHVlLmNvbnRlbnQgPSB7IHR5cGU6ICdvYmplY3QnLCBmaWVsZHM6IGZpZWxkcyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUuY29udGVudDtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUuYXNBcnJheSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF2YWx1ZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IHZhbHVlLmRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBfdGhpcy53cmFwV2l0aE1ldGEoaXRlbSwgdmFsdWUuc3RhcnRNZXRhKTsgfSk7XHJcbiAgICAgICAgICAgIHZhciBtZXRhcyA9IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5tZXRhOyB9KTtcclxuICAgICAgICAgICAgdmFsdWUuY29udGVudCA9IHsgdHlwZTogJ2FycmF5JywgZWxlbWVudHM6IGVsZW1lbnRzLCBtZXRhczogbWV0YXMgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmNvbnRlbnQ7XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLmFzU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF2YWx1ZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSB2YWx1ZS5kYXRhO1xyXG4gICAgICAgICAgICB2YXIgcGFydCA9IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBzdHIsXHJcbiAgICAgICAgICAgICAgICB1dGY4c2l6ZTogdXRmOHN0cmluZ1NpemUoc3RyKSxcclxuICAgICAgICAgICAgICAgIHVzZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRNZXRhOiB2YWx1ZS5zdGFydE1ldGEsXHJcbiAgICAgICAgICAgICAgICBlbmRNZXRhOiB2YWx1ZS5lbmRNZXRhXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhbHVlLmNvbnRlbnQgPSB0aGlzLnN0cmluZ0Zyb21QYXJ0cyhbcGFydF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUuY29udGVudDtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUuc3RyaW5nRnJvbVBhcnRzID0gZnVuY3Rpb24gKHBhcnRzKSB7XHJcbiAgICAgICAgdmFyIHN0ciA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0c1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwYXJ0c18xID0gcGFydHM7IF9pIDwgcGFydHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c18xW19pXTtcclxuICAgICAgICAgICAgcGFydC51c2VzLnB1c2goc3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUub2JqZWN0R2V0S2V5cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZS5jb250ZW50LmZpZWxkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5vYmplY3RHZXRGaWVsZCA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IHRoaXMuYXNPYmplY3QodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBvYmouZmllbGRzW2tleV07XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLmFycmF5R2V0RWxlbWVudCA9IGZ1bmN0aW9uICh2YWx1ZSwgaWR4KSB7XHJcbiAgICAgICAgdmFyIGFyciA9IHRoaXMuYXNBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGFyci5lbGVtZW50c1tpZHhdO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVFbmRNZXRhKGNvbnRlbnQpO1xyXG4gICAgICAgIHJldHVybiB7IGNvbnRlbnQ6IGNvbnRlbnQsIHN0YXJ0TWV0YTogdGhpcy5tZXRhLCBlbmRNZXRhOiB0aGlzLm1ldGEgfTtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUubWFya0NoYW5nZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwKHVud3JhcCh2YWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS51cGRhdGVFbmRNZXRhID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcclxuICAgICAgICBpZiAoY29udGVudC50eXBlID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb250ZW50LnBhcnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBwYXJ0LmVuZE1ldGEgPSB0aGlzLm1ldGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdhcnJheScpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBjb250ZW50LmVsZW1lbnRzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5jb250ZW50ICYmIHZhbC5lbmRNZXRhICE9PSB0aGlzLm1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbmRNZXRhKHZhbC5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsLmVuZE1ldGEgPSB0aGlzLm1ldGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIF9lID0gT2JqZWN0LnZhbHVlcyhjb250ZW50LmZpZWxkcyk7IF9kIDwgX2UubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IF9lW19kXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsLmNvbnRlbnQgJiYgdmFsLmVuZE1ldGEgIT09IHRoaXMubWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVuZE1ldGEodmFsLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWwuZW5kTWV0YSA9IHRoaXMubWV0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUuY29weVN0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgb3RoZXIgPSB0aGlzLmFzU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nRnJvbVBhcnRzKG90aGVyLnBhcnRzLnNsaWNlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgcGFydHM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5jb3B5T2JqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgIGZpZWxkczoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgb3RoZXIgPSB0aGlzLmFzT2JqZWN0KHZhbHVlKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvYmouZmllbGRzLCBvdGhlci5maWVsZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5jb3B5QXJyYXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgYXJyID0gdmFsdWUgPyB0aGlzLmFzQXJyYXkodmFsdWUpIDogbnVsbDtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBhcnIgPyBhcnIuZWxlbWVudHMgOiBbXTtcclxuICAgICAgICB2YXIgbWV0YXMgPSBhcnIgPyBhcnIubWV0YXMgOiBbXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxyXG4gICAgICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXHJcbiAgICAgICAgICAgIG1ldGFzOiBtZXRhc1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLm9iamVjdFNldEZpZWxkID0gZnVuY3Rpb24gKHRhcmdldCwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5maWVsZHNba2V5XSA9IHZhbHVlO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5vYmplY3REZWxldGVGaWVsZCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGRlbGV0ZSB0YXJnZXQuZmllbGRzW2tleV07XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLmFycmF5QXBwZW5kVmFsdWUgPSBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5lbGVtZW50cy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB0YXJnZXQubWV0YXMucHVzaCh0aGlzLm1ldGEpO1xyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5hcnJheUFwcGVuZFNsaWNlID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgdmFyIGFyciA9IHRoaXMuYXNBcnJheShzb3VyY2UpO1xyXG4gICAgICAgIHZhciBzYW1lUG9zaXRpb24gPSBhcnIuZWxlbWVudHMubGVuZ3RoID09PSBsZWZ0O1xyXG4gICAgICAgIChfYSA9IHRhcmdldC5lbGVtZW50cykucHVzaC5hcHBseShfYSwgYXJyLmVsZW1lbnRzLnNsaWNlKGxlZnQsIHJpZ2h0KSk7XHJcbiAgICAgICAgaWYgKHNhbWVQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAoX2IgPSB0YXJnZXQubWV0YXMpLnB1c2guYXBwbHkoX2IsIGFyci5tZXRhcy5zbGljZShsZWZ0LCByaWdodCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxlZnQ7IGkgPCByaWdodDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQubWV0YXMucHVzaCh0aGlzLm1ldGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1vZGVsLnByb3RvdHlwZS5zdHJpbmdBcHBlbmRWYWx1ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMuYXNTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzdHIucGFydHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmluZ0FwcGVuZFBhcnQodGFyZ2V0LCBwYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLnN0cmluZ0FwcGVuZFBhcnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJ0KSB7XHJcbiAgICAgICAgdGFyZ2V0LnBhcnRzLnB1c2gocGFydCk7XHJcbiAgICAgICAgcGFydC51c2VzLnB1c2godGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUucmVzb2x2ZVN0cmluZ1BhcnQgPSBmdW5jdGlvbiAoc3RyLCBmcm9tLCBsZW4pIHtcclxuICAgICAgICBpZiAobGVuID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgICAgICBmb3IgKHZhciBpID0gZnJvbTsgaSA8IHN0ci5wYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcGFydCA9IHN0ci5wYXJ0c1tpXTtcclxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gcGFydC51dGY4c2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2hlcyBwZXJmZWN0IVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsZW4gPCBwYXJ0LnV0ZjhzaXplKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGEgcGFydCBvZiB0aGlzIGNodW5rLiBXZSBub3cgbmVlZCB0byBzcGxpdCBpdCB1cC5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRTdHJpbmcocGFydCwgbGVuKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZW4gLT0gcGFydC51dGY4c2l6ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzcGxpdHRpbmcgc3RyaW5nIG91dCBvZiBib3VuZHMnKTtcclxuICAgIH07XHJcbiAgICBNb2RlbC5wcm90b3R5cGUuc3BsaXRTdHJpbmcgPSBmdW5jdGlvbiAocGFydCwgaWR4KSB7XHJcbiAgICAgICAgdmFyIGxlZnRWYWx1ZTtcclxuICAgICAgICB2YXIgcmlnaHRWYWx1ZTtcclxuICAgICAgICB2YXIgbGVmdFNpemUgPSBpZHg7XHJcbiAgICAgICAgdmFyIHJpZ2h0U2l6ZSA9IHBhcnQudXRmOHNpemUgLSBsZWZ0U2l6ZTtcclxuICAgICAgICAvLyBpZHggaXMgaGVyZSBpbiBVVEYtOCBpbmRleCwgbm90IGNvZGVwb2ludCBpbmRleC5cclxuICAgICAgICAvLyBUaGlzIG1lYW5zIHdlIG1pZ2h0IHRvIGFkanVzdCBmb3IgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxyXG4gICAgICAgIGlmIChwYXJ0LnV0ZjhzaXplICE9PSBwYXJ0LnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgYnl0ZUNvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yIChpZHggPSAwOyBieXRlQ291bnQgPCBsZWZ0U2l6ZTsgaWR4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcGFydC52YWx1ZS5jb2RlUG9pbnRBdChpZHgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoY29kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSA9PT0gNClcclxuICAgICAgICAgICAgICAgICAgICBpZHgrKzsgLy8gU3Vycm9nYXRlIHBhaXIuXHJcbiAgICAgICAgICAgICAgICBieXRlQ291bnQgKz0gc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZWZ0VmFsdWUgPSBwYXJ0LnZhbHVlLnNsaWNlKDAsIGlkeCk7XHJcbiAgICAgICAgcmlnaHRWYWx1ZSA9IHBhcnQudmFsdWUuc2xpY2UoaWR4KTtcclxuICAgICAgICB2YXIgbmV3UGFydCA9IHtcclxuICAgICAgICAgICAgdmFsdWU6IHJpZ2h0VmFsdWUsXHJcbiAgICAgICAgICAgIHV0ZjhzaXplOiByaWdodFNpemUsXHJcbiAgICAgICAgICAgIHVzZXM6IHBhcnQudXNlcy5zbGljZSgpLFxyXG4gICAgICAgICAgICBzdGFydE1ldGE6IHBhcnQuc3RhcnRNZXRhLFxyXG4gICAgICAgICAgICBlbmRNZXRhOiBwYXJ0LmVuZE1ldGFcclxuICAgICAgICB9O1xyXG4gICAgICAgIHBhcnQudmFsdWUgPSBsZWZ0VmFsdWU7XHJcbiAgICAgICAgcGFydC51dGY4c2l6ZSA9IGxlZnRTaXplO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBwYXJ0LnVzZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2UgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIC8vIEluc2VydCB0aGUgbmV3IHBhcnQuXHJcbiAgICAgICAgICAgIHZhciBpZHhfMSA9IHVzZS5wYXJ0cy5pbmRleE9mKHBhcnQpO1xyXG4gICAgICAgICAgICBpZiAoaWR4XzEgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdidWc6IG1pc21hdGNoIGJldHdlZW4gc3RyaW5nIHBhcnRzIGFuZCB1c2UuJyk7XHJcbiAgICAgICAgICAgIHVzZS5wYXJ0cy5zcGxpY2UoaWR4XzEgKyAxLCAwLCBuZXdQYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTW9kZWwucHJvdG90eXBlLnN0cmluZ0FwcGVuZFNsaWNlID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHZhciBzdHIgPSB0aGlzLmFzU3RyaW5nKHNvdXJjZSk7XHJcbiAgICAgICAgdmFyIGZpcnN0UGFydCA9IHRoaXMucmVzb2x2ZVN0cmluZ1BhcnQoc3RyLCAwLCBsZWZ0KTtcclxuICAgICAgICB2YXIgbGFzdFBhcnQgPSB0aGlzLnJlc29sdmVTdHJpbmdQYXJ0KHN0ciwgZmlyc3RQYXJ0LCByaWdodCAtIGxlZnQpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBmaXJzdFBhcnQ7IGkgPCBsYXN0UGFydDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gc3RyLnBhcnRzW2ldO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmluZ0FwcGVuZFBhcnQodGFyZ2V0LCBwYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1vZGVsO1xyXG59KCkpO1xyXG4vLyBUdXJucyBhIG5hdGl2ZSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIGEgVmFsdWUgd2l0aCBhIGdpdmVuIG9yaWdpbi5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZGF0YSwgbWV0YSkge1xyXG4gICAgcmV0dXJuIHsgZGF0YTogZGF0YSwgc3RhcnRNZXRhOiBtZXRhLCBlbmRNZXRhOiBtZXRhIH07XHJcbn1cclxuLy8gQ29udmVydHMgYSBWYWx1ZSBpbnRvIGEgbmF0aXZlIEphdmFTY3JpcHQgdHlwZS5cclxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZS5kYXRhICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgICByZXR1cm4gdmFsdWUuZGF0YTtcclxuICAgIHZhciByZXN1bHQ7XHJcbiAgICB2YXIgY29udGVudCA9IHZhbHVlLmNvbnRlbnQ7XHJcbiAgICBzd2l0Y2ggKGNvbnRlbnQudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGNvbnRlbnQucGFydHMubWFwKGZ1bmN0aW9uIChwYXJ0KSB7IHJldHVybiBwYXJ0LnZhbHVlOyB9KS5qb2luKCcnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYXJyYXknOlxyXG4gICAgICAgICAgICByZXN1bHQgPSBjb250ZW50LmVsZW1lbnRzLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiB1bndyYXAodmFsKTsgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ29iamVjdCc6IHtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhjb250ZW50LmZpZWxkcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWwgPSBfYlsxXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdW53cmFwKHZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YWx1ZS5kYXRhID0gcmVzdWx0O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vLyBSZXR1cm5zIHRoZSB0eXBlIG9mIGEgVmFsdWUuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7XHJcbiAgICBpZiAodmFsdWUuY29udGVudClcclxuICAgICAgICByZXR1cm4gdmFsdWUuY29udGVudC50eXBlO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUuZGF0YSkpXHJcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XHJcbiAgICBpZiAodmFsdWUuZGF0YSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5kYXRhO1xyXG59XHJcbi8vIFVwZGF0ZXMgdGhlIGByaWdodGAgdmFsdWUgc3VjaCB0aGF0IGl0IHJldXNlcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGBsZWZ0YCB2YWx1ZS5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYmFzZVZhbHVlKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICB2YXIgbGVmdFR5cGUgPSBnZXRUeXBlKGxlZnQpO1xyXG4gICAgdmFyIHJpZ2h0VHlwZSA9IGdldFR5cGUocmlnaHQpO1xyXG4gICAgaWYgKGxlZnRUeXBlICE9PSByaWdodFR5cGUpXHJcbiAgICAgICAgcmV0dXJuIHJpZ2h0O1xyXG4gICAgdmFyIGxlZnRNb2RlbCA9IG5ldyBNb2RlbChsZWZ0LmVuZE1ldGEpO1xyXG4gICAgdmFyIHJpZ2h0TW9kZWwgPSBuZXcgTW9kZWwocmlnaHQuZW5kTWV0YSk7XHJcbiAgICBzd2l0Y2ggKGxlZnRUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAnb2JqZWN0Jzoge1xyXG4gICAgICAgICAgICB2YXIgbGVmdE9iaiA9IGxlZnRNb2RlbC5hc09iamVjdChsZWZ0KTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0T2JqID0gcmlnaHRNb2RlbC5hc09iamVjdChyaWdodCk7XHJcbiAgICAgICAgICAgIC8vIE51bWJlciBvZiBmaWVsZHMgd2hpY2ggYXJlIGlkZW50aWNhbCBpbiBsZWZ0IGFuZCByaWdodC5cclxuICAgICAgICAgICAgdmFyIGlkZW50aWNhbEZpZWxkQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgbGVmdEZpZWxkQ291bnQgPSBPYmplY3Qua2V5cyhsZWZ0T2JqLmZpZWxkcykubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgcmlnaHRGaWVsZENvdW50ID0gT2JqZWN0LmtleXMocmlnaHRPYmouZmllbGRzKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhyaWdodE9iai5maWVsZHMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgcmlnaHRWYWwgPSBfYlsxXTtcclxuICAgICAgICAgICAgICAgIHZhciBsZWZ0VmFsID0gbGVmdE9iai5maWVsZHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0VmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRPYmouZmllbGRzW2tleV0gPSByZWJhc2VWYWx1ZShsZWZ0VmFsLCByaWdodFZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJpZ2h0T2JqLmZpZWxkc1trZXldID09PSBsZWZ0VmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWNhbEZpZWxkQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlzSWRlbnRpY2FsID0gbGVmdEZpZWxkQ291bnQgPT09IHJpZ2h0RmllbGRDb3VudCAmJiBsZWZ0RmllbGRDb3VudCA9PT0gaWRlbnRpY2FsRmllbGRDb3VudDtcclxuICAgICAgICAgICAgcmV0dXJuIGlzSWRlbnRpY2FsID8gbGVmdCA6IHJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdhcnJheSc6IHtcclxuICAgICAgICAgICAgdmFyIGxlZnRBcnIgPSBsZWZ0TW9kZWwuYXNBcnJheShsZWZ0KTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0QXJyID0gcmlnaHRNb2RlbC5hc0FycmF5KHJpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGxlZnRBcnIuZWxlbWVudHMubGVuZ3RoICE9PSByaWdodEFyci5lbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBudW1SZWJhc2VkID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByaWdodEFyci5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmlnaHRBcnIuZWxlbWVudHNbaV0gPSByZWJhc2VWYWx1ZShsZWZ0QXJyLmVsZW1lbnRzW2ldLCByaWdodEFyci5lbGVtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRBcnIuZWxlbWVudHNbaV0gIT09IGxlZnRBcnIuZWxlbWVudHNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBudW1SZWJhc2VkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bVJlYmFzZWQgPT09IDAgPyBsZWZ0IDogcmlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgJ251bGwnOlxyXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxyXG4gICAgICAgIGNhc2UgJ251bWJlcic6IHtcclxuICAgICAgICAgICAgaWYgKHVud3JhcChsZWZ0KSA9PT0gdW53cmFwKHJpZ2h0KSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnc3RyaW5nJzoge1xyXG4gICAgICAgICAgICB2YXIgbGVmdFJhdyA9IHVud3JhcChsZWZ0KTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0UmF3ID0gdW53cmFwKHJpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGxlZnRSYXcgPT09IHJpZ2h0UmF3KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQ7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSByaWdodE1vZGVsLmNvcHlTdHJpbmcobnVsbCk7XHJcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSBjb21tb25QcmVmaXgobGVmdFJhdywgcmlnaHRSYXcpO1xyXG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gY29tbW9uU3VmZml4KGxlZnRSYXcsIHJpZ2h0UmF3LCBwcmVmaXgpO1xyXG4gICAgICAgICAgICB2YXIgcmlnaHRMZW4gPSB1dGY4c3RyaW5nU2l6ZShyaWdodFJhdyk7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0TGVuID0gdXRmOHN0cmluZ1NpemUobGVmdFJhdyk7XHJcbiAgICAgICAgICAgIGlmICgwIDwgcHJlZml4KSB7XHJcbiAgICAgICAgICAgICAgICByaWdodE1vZGVsLnN0cmluZ0FwcGVuZFNsaWNlKHJlc3VsdCwgbGVmdCwgMCwgcHJlZml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJlZml4IDwgcmlnaHRMZW4gLSBzdWZmaXgpIHtcclxuICAgICAgICAgICAgICAgIHJpZ2h0TW9kZWwuc3RyaW5nQXBwZW5kU2xpY2UocmVzdWx0LCByaWdodCwgcHJlZml4LCByaWdodExlbiAtIHN1ZmZpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxlZnRMZW4gLSBzdWZmaXggPCBsZWZ0TGVuKSB7XHJcbiAgICAgICAgICAgICAgICByaWdodE1vZGVsLnN0cmluZ0FwcGVuZFNsaWNlKHJlc3VsdCwgbGVmdCwgbGVmdExlbiAtIHN1ZmZpeCwgbGVmdExlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gcmlnaHRNb2RlbC5maW5hbGl6ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICBpZiAodW53cmFwKHZhbHVlKSAhPT0gcmlnaHRSYXcpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luY29ycmVjdCBzdHJpbmcgcmViYXNlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmlnaHQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGF0Y2gobGVmdCwgcGF0Y2gsIHN0YXJ0TWV0YSkge1xyXG4gICAgdmFyIG1vZGVsID0gbmV3IE1vZGVsKHN0YXJ0TWV0YSk7XHJcbiAgICB2YXIgcGF0Y2hlciA9IG5ldyBQYXRjaGVyKG1vZGVsLCBsZWZ0LCBwYXRjaCk7XHJcbiAgICByZXR1cm4gcGF0Y2hlci5wcm9jZXNzKCk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5jcmVtZW50YWwtcGF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/incremental-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* reexport safe */ _simple_patcher__WEBPACK_IMPORTED_MODULE_1__.applyPatch; },\n/* harmony export */   \"incremental\": function() { return /* reexport module object */ _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__; }\n/* harmony export */ });\n/* harmony import */ var _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./incremental-patcher */ \"./node_modules/mendoza/lib/esm/incremental-patcher.js\");\n/* harmony import */ var _simple_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple-patcher */ \"./node_modules/mendoza/lib/esm/simple-patcher.js\");\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDZjtBQUNNO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZW5kb3phL2xpYi9lc20vaW5kZXguanM/NGE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpbmNyZW1lbnRhbF8xIGZyb20gJy4vaW5jcmVtZW50YWwtcGF0Y2hlcic7XHJcbmV4cG9ydCB7IGluY3JlbWVudGFsXzEgYXMgaW5jcmVtZW50YWwgfTtcclxuZXhwb3J0IHsgYXBwbHlQYXRjaCB9IGZyb20gJy4vc2ltcGxlLXBhdGNoZXInO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/index.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/internal-patcher.js":
/*!**********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/internal-patcher.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Patcher\": function() { return /* binding */ Patcher; }\n/* harmony export */ });\nvar OPS = [\r\n    'Value',\r\n    'Copy',\r\n    'Blank',\r\n    'ReturnIntoArray',\r\n    'ReturnIntoObject',\r\n    'ReturnIntoObjectSameKey',\r\n    'PushField',\r\n    'PushElement',\r\n    'PushParent',\r\n    'Pop',\r\n    'PushFieldCopy',\r\n    'PushFieldBlank',\r\n    'PushElementCopy',\r\n    'PushElementBlank',\r\n    'ReturnIntoObjectPop',\r\n    'ReturnIntoObjectSameKeyPop',\r\n    'ReturnIntoArrayPop',\r\n    'ObjectSetFieldValue',\r\n    'ObjectCopyField',\r\n    'ObjectDeleteField',\r\n    'ArrayAppendValue',\r\n    'ArrayAppendSlice',\r\n    'StringAppendString',\r\n    'StringAppendSlice'\r\n];\r\nvar Patcher = /** @class */ (function () {\r\n    function Patcher(model, root, patch) {\r\n        this.i = 0;\r\n        this.inputStack = [];\r\n        this.outputStack = [];\r\n        this.model = model;\r\n        this.root = root;\r\n        this.patch = patch;\r\n    }\r\n    Patcher.prototype.read = function () {\r\n        return this.patch[this.i++];\r\n    };\r\n    Patcher.prototype.process = function () {\r\n        this.inputStack.push({ value: this.root });\r\n        this.outputStack.push({ value: this.root });\r\n        for (; this.i < this.patch.length;) {\r\n            var opcode = this.read();\r\n            var op = OPS[opcode];\r\n            if (!op)\r\n                throw new Error(\"Unknown opcode: \" + opcode);\r\n            var processor = \"process\" + op;\r\n            this[processor].apply(this);\r\n        }\r\n        var entry = this.outputStack.pop();\r\n        return this.finalizeOutput(entry);\r\n    };\r\n    Patcher.prototype.inputEntry = function () {\r\n        return this.inputStack[this.inputStack.length - 1];\r\n    };\r\n    Patcher.prototype.inputKey = function (entry, idx) {\r\n        if (!entry.keys) {\r\n            entry.keys = this.model.objectGetKeys(entry.value).sort();\r\n        }\r\n        return entry.keys[idx];\r\n    };\r\n    Patcher.prototype.outputEntry = function () {\r\n        return this.outputStack[this.outputStack.length - 1];\r\n    };\r\n    Patcher.prototype.outputArray = function () {\r\n        var entry = this.outputEntry();\r\n        if (!entry.writeValue) {\r\n            entry.writeValue = this.model.copyArray(entry.value);\r\n        }\r\n        return entry.writeValue;\r\n    };\r\n    Patcher.prototype.outputObject = function () {\r\n        var entry = this.outputEntry();\r\n        if (!entry.writeValue) {\r\n            entry.writeValue = this.model.copyObject(entry.value);\r\n        }\r\n        return entry.writeValue;\r\n    };\r\n    Patcher.prototype.outputString = function () {\r\n        var entry = this.outputEntry();\r\n        if (!entry.writeValue) {\r\n            entry.writeValue = this.model.copyString(entry.value);\r\n        }\r\n        return entry.writeValue;\r\n    };\r\n    Patcher.prototype.finalizeOutput = function (entry) {\r\n        if (entry.writeValue) {\r\n            return this.model.finalize(entry.writeValue);\r\n        }\r\n        else {\r\n            return entry.value;\r\n        }\r\n    };\r\n    // Processors:\r\n    Patcher.prototype.processValue = function () {\r\n        var value = this.model.wrap(this.read());\r\n        this.outputStack.push({ value: value });\r\n    };\r\n    Patcher.prototype.processCopy = function () {\r\n        var input = this.inputEntry();\r\n        this.outputStack.push({ value: input.value });\r\n    };\r\n    Patcher.prototype.processBlank = function () {\r\n        this.outputStack.push({ value: null });\r\n    };\r\n    Patcher.prototype.processReturnIntoArray = function () {\r\n        var entry = this.outputStack.pop();\r\n        var result = this.finalizeOutput(entry);\r\n        var arr = this.outputArray();\r\n        this.model.arrayAppendValue(arr, result);\r\n    };\r\n    Patcher.prototype.processReturnIntoObject = function () {\r\n        var key = this.read();\r\n        var entry = this.outputStack.pop();\r\n        var result = this.finalizeOutput(entry);\r\n        result = this.model.markChanged(result);\r\n        var obj = this.outputObject();\r\n        this.model.objectSetField(obj, key, result);\r\n    };\r\n    Patcher.prototype.processReturnIntoObjectSameKey = function () {\r\n        var input = this.inputEntry();\r\n        var entry = this.outputStack.pop();\r\n        var result = this.finalizeOutput(entry);\r\n        var obj = this.outputObject();\r\n        this.model.objectSetField(obj, input.key, result);\r\n    };\r\n    Patcher.prototype.processPushField = function () {\r\n        var idx = this.read();\r\n        var entry = this.inputEntry();\r\n        var key = this.inputKey(entry, idx);\r\n        var value = this.model.objectGetField(entry.value, key);\r\n        this.inputStack.push({ value: value, key: key });\r\n    };\r\n    Patcher.prototype.processPushElement = function () {\r\n        var idx = this.read();\r\n        var entry = this.inputEntry();\r\n        var value = this.model.arrayGetElement(entry.value, idx);\r\n        this.inputStack.push({ value: value });\r\n    };\r\n    Patcher.prototype.processPop = function () {\r\n        this.inputStack.pop();\r\n    };\r\n    Patcher.prototype.processPushFieldCopy = function () {\r\n        this.processPushField();\r\n        this.processCopy();\r\n    };\r\n    Patcher.prototype.processPushFieldBlank = function () {\r\n        this.processPushField();\r\n        this.processBlank();\r\n    };\r\n    Patcher.prototype.processPushElementCopy = function () {\r\n        this.processPushElement();\r\n        this.processCopy();\r\n    };\r\n    Patcher.prototype.processPushElementBlank = function () {\r\n        this.processPushElement();\r\n        this.processBlank();\r\n    };\r\n    Patcher.prototype.processReturnIntoObjectPop = function () {\r\n        this.processReturnIntoObject();\r\n        this.processPop();\r\n    };\r\n    Patcher.prototype.processReturnIntoObjectSameKeyPop = function () {\r\n        this.processReturnIntoObjectSameKey();\r\n        this.processPop();\r\n    };\r\n    Patcher.prototype.processReturnIntoArrayPop = function () {\r\n        this.processReturnIntoArray();\r\n        this.processPop();\r\n    };\r\n    Patcher.prototype.processObjectSetFieldValue = function () {\r\n        this.processValue();\r\n        this.processReturnIntoObject();\r\n    };\r\n    Patcher.prototype.processObjectCopyField = function () {\r\n        this.processPushField();\r\n        this.processCopy();\r\n        this.processReturnIntoObjectSameKey();\r\n        this.processPop();\r\n    };\r\n    Patcher.prototype.processObjectDeleteField = function () {\r\n        var idx = this.read();\r\n        var entry = this.inputEntry();\r\n        var key = this.inputKey(entry, idx);\r\n        var obj = this.outputObject();\r\n        this.model.objectDeleteField(obj, key);\r\n    };\r\n    Patcher.prototype.processArrayAppendValue = function () {\r\n        var value = this.model.wrap(this.read());\r\n        var arr = this.outputArray();\r\n        this.model.arrayAppendValue(arr, value);\r\n    };\r\n    Patcher.prototype.processArrayAppendSlice = function () {\r\n        var left = this.read();\r\n        var right = this.read();\r\n        var str = this.outputArray();\r\n        var val = this.inputEntry().value;\r\n        this.model.arrayAppendSlice(str, val, left, right);\r\n    };\r\n    Patcher.prototype.processStringAppendString = function () {\r\n        var value = this.model.wrap(this.read());\r\n        var str = this.outputString();\r\n        this.model.stringAppendValue(str, value);\r\n    };\r\n    Patcher.prototype.processStringAppendSlice = function () {\r\n        var left = this.read();\r\n        var right = this.read();\r\n        var str = this.outputString();\r\n        var val = this.inputEntry().value;\r\n        this.model.stringAppendSlice(str, val, left, right);\r\n    };\r\n    return Patcher;\r\n}());\r\n\r\n//# sourceMappingURL=internal-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/internal-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/simple-patcher.js":
/*!********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/simple-patcher.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\r\n\r\nvar Model = {\r\n    wrap: function (data) {\r\n        return data;\r\n    },\r\n    finalize: function (b) {\r\n        if (Array.isArray(b)) {\r\n            return b;\r\n        }\r\n        else {\r\n            return b.data;\r\n        }\r\n    },\r\n    markChanged: function (value) {\r\n        return value;\r\n    },\r\n    objectGetKeys: function (value) {\r\n        return Object.keys(value);\r\n    },\r\n    objectGetField: function (value, key) {\r\n        return value[key];\r\n    },\r\n    arrayGetElement: function (value, idx) {\r\n        return value[idx];\r\n    },\r\n    copyObject: function (value) {\r\n        var res = {\r\n            type: 'object',\r\n            data: {}\r\n        };\r\n        if (value !== null) {\r\n            for (var _i = 0, _a = Object.entries(value); _i < _a.length; _i++) {\r\n                var _b = _a[_i], key = _b[0], val = _b[1];\r\n                res.data[key] = val;\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n    copyArray: function (value) {\r\n        if (value === null)\r\n            return [];\r\n        return value.slice();\r\n    },\r\n    copyString: function (value) {\r\n        return {\r\n            type: 'string',\r\n            data: value === null ? '' : value\r\n        };\r\n    },\r\n    objectSetField: function (target, key, value) {\r\n        target.data[key] = value;\r\n    },\r\n    objectDeleteField: function (target, key) {\r\n        delete target.data[key];\r\n    },\r\n    arrayAppendValue: function (target, value) {\r\n        target.push(value);\r\n    },\r\n    arrayAppendSlice: function (target, source, left, right) {\r\n        target.push.apply(target, source.slice(left, right));\r\n    },\r\n    stringAppendSlice: function (target, source, left, right) {\r\n        var sourceString = source;\r\n        var leftPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, left);\r\n        var rightPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, right, leftPos);\r\n        target.data += sourceString.slice(leftPos, rightPos);\r\n    },\r\n    stringAppendValue: function (target, value) {\r\n        target.data += value;\r\n    }\r\n};\r\n// Applies a patch on a JavaScript object.\r\nfunction applyPatch(left, patch) {\r\n    var root = left; // No need to wrap because the representation is the same.\r\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(Model, root, patch);\r\n    return patcher.process();\r\n}\r\n//# sourceMappingURL=simple-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3NpbXBsZS1wYXRjaGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNIO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxnQkFBZ0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQix1REFBZ0I7QUFDdEMsdUJBQXVCLHVEQUFnQjtBQUN2QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxxQkFBcUI7QUFDckIsc0JBQXNCLHNEQUFPO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3NpbXBsZS1wYXRjaGVyLmpzPzY5YjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0Y2hlciB9IGZyb20gJy4vaW50ZXJuYWwtcGF0Y2hlcic7XHJcbmltcG9ydCB7IHV0ZjhyZXNvbHZlSW5kZXggfSBmcm9tICcuL3V0ZjgnO1xyXG52YXIgTW9kZWwgPSB7XHJcbiAgICB3cmFwOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSxcclxuICAgIGZpbmFsaXplOiBmdW5jdGlvbiAoYikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGIuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWFya0NoYW5nZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBvYmplY3RHZXRLZXlzOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpO1xyXG4gICAgfSxcclxuICAgIG9iamVjdEdldEZpZWxkOiBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZVtrZXldO1xyXG4gICAgfSxcclxuICAgIGFycmF5R2V0RWxlbWVudDogZnVuY3Rpb24gKHZhbHVlLCBpZHgpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWVbaWR4XTtcclxuICAgIH0sXHJcbiAgICBjb3B5T2JqZWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgZGF0YToge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmVudHJpZXModmFsdWUpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsID0gX2JbMV07XHJcbiAgICAgICAgICAgICAgICByZXMuZGF0YVtrZXldID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9LFxyXG4gICAgY29weUFycmF5OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoKTtcclxuICAgIH0sXHJcbiAgICBjb3B5U3RyaW5nOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgZGF0YTogdmFsdWUgPT09IG51bGwgPyAnJyA6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBvYmplY3RTZXRGaWVsZDogZnVuY3Rpb24gKHRhcmdldCwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5kYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBvYmplY3REZWxldGVGaWVsZDogZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgZGVsZXRlIHRhcmdldC5kYXRhW2tleV07XHJcbiAgICB9LFxyXG4gICAgYXJyYXlBcHBlbmRWYWx1ZTogZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcclxuICAgICAgICB0YXJnZXQucHVzaCh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgYXJyYXlBcHBlbmRTbGljZTogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHRhcmdldC5wdXNoLmFwcGx5KHRhcmdldCwgc291cmNlLnNsaWNlKGxlZnQsIHJpZ2h0KSk7XHJcbiAgICB9LFxyXG4gICAgc3RyaW5nQXBwZW5kU2xpY2U6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgbGVmdCwgcmlnaHQpIHtcclxuICAgICAgICB2YXIgc291cmNlU3RyaW5nID0gc291cmNlO1xyXG4gICAgICAgIHZhciBsZWZ0UG9zID0gdXRmOHJlc29sdmVJbmRleChzb3VyY2VTdHJpbmcsIGxlZnQpO1xyXG4gICAgICAgIHZhciByaWdodFBvcyA9IHV0ZjhyZXNvbHZlSW5kZXgoc291cmNlU3RyaW5nLCByaWdodCwgbGVmdFBvcyk7XHJcbiAgICAgICAgdGFyZ2V0LmRhdGEgKz0gc291cmNlU3RyaW5nLnNsaWNlKGxlZnRQb3MsIHJpZ2h0UG9zKTtcclxuICAgIH0sXHJcbiAgICBzdHJpbmdBcHBlbmRWYWx1ZTogZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcclxuICAgICAgICB0YXJnZXQuZGF0YSArPSB2YWx1ZTtcclxuICAgIH1cclxufTtcclxuLy8gQXBwbGllcyBhIHBhdGNoIG9uIGEgSmF2YVNjcmlwdCBvYmplY3QuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoKGxlZnQsIHBhdGNoKSB7XHJcbiAgICB2YXIgcm9vdCA9IGxlZnQ7IC8vIE5vIG5lZWQgdG8gd3JhcCBiZWNhdXNlIHRoZSByZXByZXNlbnRhdGlvbiBpcyB0aGUgc2FtZS5cclxuICAgIHZhciBwYXRjaGVyID0gbmV3IFBhdGNoZXIoTW9kZWwsIHJvb3QsIHBhdGNoKTtcclxuICAgIHJldHVybiBwYXRjaGVyLnByb2Nlc3MoKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGUtcGF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/simple-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/utf8.js":
/*!**********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/utf8.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"commonPrefix\": function() { return /* binding */ commonPrefix; },\n/* harmony export */   \"commonSuffix\": function() { return /* binding */ commonSuffix; },\n/* harmony export */   \"utf8charSize\": function() { return /* binding */ utf8charSize; },\n/* harmony export */   \"utf8resolveIndex\": function() { return /* binding */ utf8resolveIndex; },\n/* harmony export */   \"utf8stringSize\": function() { return /* binding */ utf8stringSize; }\n/* harmony export */ });\nfunction utf8charSize(code) {\r\n    if (code >> 16) {\r\n        return 4;\r\n    }\r\n    else if (code >> 11) {\r\n        return 3;\r\n    }\r\n    else if (code >> 7) {\r\n        return 2;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\nfunction utf8stringSize(str) {\r\n    var b = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var code = str.codePointAt(i);\r\n        var size = utf8charSize(code);\r\n        if (size == 4)\r\n            i++;\r\n        b += size;\r\n    }\r\n    return b;\r\n}\r\n/** Converts an UTF-8 byte index into a UCS-2 index. */\r\nfunction utf8resolveIndex(str, idx, start) {\r\n    if (start === void 0) { start = 0; }\r\n    var byteCount = start;\r\n    var ucsIdx = 0;\r\n    for (ucsIdx = start; byteCount < idx; ucsIdx++) {\r\n        var code = str.codePointAt(ucsIdx);\r\n        var size = utf8charSize(code);\r\n        if (size === 4)\r\n            ucsIdx++; // Surrogate pair.\r\n        byteCount += size;\r\n    }\r\n    return ucsIdx;\r\n}\r\nfunction commonPrefix(str, str2) {\r\n    var len = Math.min(str.length, str2.length);\r\n    var b = 0;\r\n    for (var i = 0; i < len;) {\r\n        var aPoint = str.codePointAt(i);\r\n        var bPoint = str2.codePointAt(i);\r\n        if (aPoint !== bPoint)\r\n            return b;\r\n        var size = utf8charSize(aPoint);\r\n        b += size;\r\n        i += size === 4 ? 2 : 1;\r\n    }\r\n    return b;\r\n}\r\nfunction commonSuffix(str, str2, prefix) {\r\n    if (prefix === void 0) { prefix = 0; }\r\n    var len = Math.min(str.length, str2.length) - prefix;\r\n    var b = 0;\r\n    for (var i = 0; i < len;) {\r\n        var aPoint = str.codePointAt(str.length - 1 - i);\r\n        var bPoint = str2.codePointAt(str2.length - 1 - i);\r\n        if (aPoint !== bPoint)\r\n            return b;\r\n        var size = utf8charSize(aPoint);\r\n        b += size;\r\n        i += size === 4 ? 2 : 1;\r\n    }\r\n    return b;\r\n}\r\n//# sourceMappingURL=utf8.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3V0ZjguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3V0ZjguanM/ZWM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdXRmOGNoYXJTaXplKGNvZGUpIHtcclxuICAgIGlmIChjb2RlID4+IDE2KSB7XHJcbiAgICAgICAgcmV0dXJuIDQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjb2RlID4+IDExKSB7XHJcbiAgICAgICAgcmV0dXJuIDM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjb2RlID4+IDcpIHtcclxuICAgICAgICByZXR1cm4gMjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1dGY4c3RyaW5nU2l6ZShzdHIpIHtcclxuICAgIHZhciBiID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGNvZGUgPSBzdHIuY29kZVBvaW50QXQoaSk7XHJcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoY29kZSk7XHJcbiAgICAgICAgaWYgKHNpemUgPT0gNClcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIGIgKz0gc2l6ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBiO1xyXG59XHJcbi8qKiBDb252ZXJ0cyBhbiBVVEYtOCBieXRlIGluZGV4IGludG8gYSBVQ1MtMiBpbmRleC4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhyZXNvbHZlSW5kZXgoc3RyLCBpZHgsIHN0YXJ0KSB7XHJcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cclxuICAgIHZhciBieXRlQ291bnQgPSBzdGFydDtcclxuICAgIHZhciB1Y3NJZHggPSAwO1xyXG4gICAgZm9yICh1Y3NJZHggPSBzdGFydDsgYnl0ZUNvdW50IDwgaWR4OyB1Y3NJZHgrKykge1xyXG4gICAgICAgIHZhciBjb2RlID0gc3RyLmNvZGVQb2ludEF0KHVjc0lkeCk7XHJcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoY29kZSk7XHJcbiAgICAgICAgaWYgKHNpemUgPT09IDQpXHJcbiAgICAgICAgICAgIHVjc0lkeCsrOyAvLyBTdXJyb2dhdGUgcGFpci5cclxuICAgICAgICBieXRlQ291bnQgKz0gc2l6ZTtcclxuICAgIH1cclxuICAgIHJldHVybiB1Y3NJZHg7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblByZWZpeChzdHIsIHN0cjIpIHtcclxuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBzdHIyLmxlbmd0aCk7XHJcbiAgICB2YXIgYiA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjspIHtcclxuICAgICAgICB2YXIgYVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xyXG4gICAgICAgIHZhciBiUG9pbnQgPSBzdHIyLmNvZGVQb2ludEF0KGkpO1xyXG4gICAgICAgIGlmIChhUG9pbnQgIT09IGJQb2ludClcclxuICAgICAgICAgICAgcmV0dXJuIGI7XHJcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoYVBvaW50KTtcclxuICAgICAgICBiICs9IHNpemU7XHJcbiAgICAgICAgaSArPSBzaXplID09PSA0ID8gMiA6IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYjtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29tbW9uU3VmZml4KHN0ciwgc3RyMiwgcHJlZml4KSB7XHJcbiAgICBpZiAocHJlZml4ID09PSB2b2lkIDApIHsgcHJlZml4ID0gMDsgfVxyXG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIHN0cjIubGVuZ3RoKSAtIHByZWZpeDtcclxuICAgIHZhciBiID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xyXG4gICAgICAgIHZhciBhUG9pbnQgPSBzdHIuY29kZVBvaW50QXQoc3RyLmxlbmd0aCAtIDEgLSBpKTtcclxuICAgICAgICB2YXIgYlBvaW50ID0gc3RyMi5jb2RlUG9pbnRBdChzdHIyLmxlbmd0aCAtIDEgLSBpKTtcclxuICAgICAgICBpZiAoYVBvaW50ICE9PSBiUG9pbnQpXHJcbiAgICAgICAgICAgIHJldHVybiBiO1xyXG4gICAgICAgIHZhciBzaXplID0gdXRmOGNoYXJTaXplKGFQb2ludCk7XHJcbiAgICAgICAgYiArPSBzaXplO1xyXG4gICAgICAgIGkgKz0gc2l6ZSA9PT0gNCA/IDIgOiAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGI7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRmOC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/utf8.js\n");

/***/ }),

/***/ "./node_modules/throttle-debounce/cjs/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/throttle-debounce/cjs/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n\r\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\r\n\r\n/**\r\n * Throttle execution of a function. Especially useful for rate limiting\r\n * execution of handlers on events like resize and scroll.\r\n *\r\n * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\r\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\r\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\r\n *                                    the internal counter is reset).\r\n * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                    to `callback` when the throttled-function is executed.\r\n * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\r\n *                                    schedule `callback` to execute after `delay` ms.\r\n *\r\n * @returns {Function}  A new, throttled, function.\r\n */\r\nfunction throttle (delay, noTrailing, callback, debounceMode) {\r\n  /*\r\n   * After wrapper has stopped being called, this timeout ensures that\r\n   * `callback` is executed at the proper times in `throttle` and `end`\r\n   * debounce modes.\r\n   */\r\n  var timeoutID;\r\n  var cancelled = false; // Keep track of the last time `callback` was executed.\r\n\r\n  var lastExec = 0; // Function to clear existing timeout\r\n\r\n  function clearExistingTimeout() {\r\n    if (timeoutID) {\r\n      clearTimeout(timeoutID);\r\n    }\r\n  } // Function to cancel next exec\r\n\r\n\r\n  function cancel() {\r\n    clearExistingTimeout();\r\n    cancelled = true;\r\n  } // `noTrailing` defaults to falsy.\r\n\r\n\r\n  if (typeof noTrailing !== 'boolean') {\r\n    debounceMode = callback;\r\n    callback = noTrailing;\r\n    noTrailing = undefined;\r\n  }\r\n  /*\r\n   * The `wrapper` function encapsulates all of the throttling / debouncing\r\n   * functionality and when executed will limit the rate at which `callback`\r\n   * is executed.\r\n   */\r\n\r\n\r\n  function wrapper() {\r\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      arguments_[_key] = arguments[_key];\r\n    }\r\n\r\n    var self = this;\r\n    var elapsed = Date.now() - lastExec;\r\n\r\n    if (cancelled) {\r\n      return;\r\n    } // Execute `callback` and update the `lastExec` timestamp.\r\n\r\n\r\n    function exec() {\r\n      lastExec = Date.now();\r\n      callback.apply(self, arguments_);\r\n    }\r\n    /*\r\n     * If `debounceMode` is true (at begin) this is used to clear the flag\r\n     * to allow future `callback` executions.\r\n     */\r\n\r\n\r\n    function clear() {\r\n      timeoutID = undefined;\r\n    }\r\n\r\n    if (debounceMode && !timeoutID) {\r\n      /*\r\n       * Since `wrapper` is being called for the first time and\r\n       * `debounceMode` is true (at begin), execute `callback`.\r\n       */\r\n      exec();\r\n    }\r\n\r\n    clearExistingTimeout();\r\n\r\n    if (debounceMode === undefined && elapsed > delay) {\r\n      /*\r\n       * In throttle mode, if `delay` time has been exceeded, execute\r\n       * `callback`.\r\n       */\r\n      exec();\r\n    } else if (noTrailing !== true) {\r\n      /*\r\n       * In trailing throttle mode, since `delay` time has not been\r\n       * exceeded, schedule `callback` to execute `delay` ms after most\r\n       * recent execution.\r\n       *\r\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\r\n       * after `delay` ms.\r\n       *\r\n       * If `debounceMode` is false (at end), schedule `callback` to\r\n       * execute after `delay` ms.\r\n       */\r\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\r\n    }\r\n  }\r\n\r\n  wrapper.cancel = cancel; // Return the wrapper function.\r\n\r\n  return wrapper;\r\n}\r\n\r\n/* eslint-disable no-undefined */\r\n/**\r\n * Debounce execution of a function. Debouncing, unlike throttling,\r\n * guarantees that a function is only executed a single time, either at the\r\n * very beginning of a series of calls, or at the very end.\r\n *\r\n * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\r\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\r\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\r\n * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                  to `callback` when the debounced-function is executed.\r\n *\r\n * @returns {Function} A new, debounced function.\r\n */\r\n\r\nfunction debounce (delay, atBegin, callback) {\r\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\r\n}\r\n\r\nexports.debounce = debounce;\r\nexports.throttle = throttle;\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGhyb3R0bGUtZGVib3VuY2UvY2pzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxhQUFhO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aHJvdHRsZS1kZWJvdW5jZS9janMvaW5kZXguanM/N2VkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkLG5vLXBhcmFtLXJlYXNzaWduLG5vLXNoYWRvdyAqL1xyXG5cclxuLyoqXHJcbiAqIFRocm90dGxlIGV4ZWN1dGlvbiBvZiBhIGZ1bmN0aW9uLiBFc3BlY2lhbGx5IHVzZWZ1bCBmb3IgcmF0ZSBsaW1pdGluZ1xyXG4gKiBleGVjdXRpb24gb2YgaGFuZGxlcnMgb24gZXZlbnRzIGxpa2UgcmVzaXplIGFuZCBzY3JvbGwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge251bWJlcn0gICAgZGVsYXkgLSAgICAgICAgICBBIHplcm8tb3ItZ3JlYXRlciBkZWxheSBpbiBtaWxsaXNlY29uZHMuIEZvciBldmVudCBjYWxsYmFja3MsIHZhbHVlcyBhcm91bmQgMTAwIG9yIDI1MCAob3IgZXZlbiBoaWdoZXIpIGFyZSBtb3N0IHVzZWZ1bC5cclxuICogQHBhcmFtICB7Ym9vbGVhbn0gICBbbm9UcmFpbGluZ10gLSAgIE9wdGlvbmFsLCBkZWZhdWx0cyB0byBmYWxzZS4gSWYgbm9UcmFpbGluZyBpcyB0cnVlLCBjYWxsYmFjayB3aWxsIG9ubHkgZXhlY3V0ZSBldmVyeSBgZGVsYXlgIG1pbGxpc2Vjb25kcyB3aGlsZSB0aGVcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZWQtZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkLiBJZiBub1RyYWlsaW5nIGlzIGZhbHNlIG9yIHVuc3BlY2lmaWVkLCBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkIG9uZSBmaW5hbCB0aW1lXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGxhc3QgdGhyb3R0bGVkLWZ1bmN0aW9uIGNhbGwuIChBZnRlciB0aGUgdGhyb3R0bGVkLWZ1bmN0aW9uIGhhcyBub3QgYmVlbiBjYWxsZWQgZm9yIGBkZWxheWAgbWlsbGlzZWNvbmRzLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbnRlcm5hbCBjb3VudGVyIGlzIHJlc2V0KS5cclxuICogQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayAtICAgICAgIEEgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYWZ0ZXIgZGVsYXkgbWlsbGlzZWNvbmRzLiBUaGUgYHRoaXNgIGNvbnRleHQgYW5kIGFsbCBhcmd1bWVudHMgYXJlIHBhc3NlZCB0aHJvdWdoLCBhcy1pcyxcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBgY2FsbGJhY2tgIHdoZW4gdGhlIHRocm90dGxlZC1mdW5jdGlvbiBpcyBleGVjdXRlZC5cclxuICogQHBhcmFtICB7Ym9vbGVhbn0gICBbZGVib3VuY2VNb2RlXSAtIElmIGBkZWJvdW5jZU1vZGVgIGlzIHRydWUgKGF0IGJlZ2luKSwgc2NoZWR1bGUgYGNsZWFyYCB0byBleGVjdXRlIGFmdGVyIGBkZWxheWAgbXMuIElmIGBkZWJvdW5jZU1vZGVgIGlzIGZhbHNlIChhdCBlbmQpLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlIGBjYWxsYmFja2AgdG8gZXhlY3V0ZSBhZnRlciBgZGVsYXlgIG1zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259ICBBIG5ldywgdGhyb3R0bGVkLCBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIHRocm90dGxlIChkZWxheSwgbm9UcmFpbGluZywgY2FsbGJhY2ssIGRlYm91bmNlTW9kZSkge1xyXG4gIC8qXHJcbiAgICogQWZ0ZXIgd3JhcHBlciBoYXMgc3RvcHBlZCBiZWluZyBjYWxsZWQsIHRoaXMgdGltZW91dCBlbnN1cmVzIHRoYXRcclxuICAgKiBgY2FsbGJhY2tgIGlzIGV4ZWN1dGVkIGF0IHRoZSBwcm9wZXIgdGltZXMgaW4gYHRocm90dGxlYCBhbmQgYGVuZGBcclxuICAgKiBkZWJvdW5jZSBtb2Rlcy5cclxuICAgKi9cclxuICB2YXIgdGltZW91dElEO1xyXG4gIHZhciBjYW5jZWxsZWQgPSBmYWxzZTsgLy8gS2VlcCB0cmFjayBvZiB0aGUgbGFzdCB0aW1lIGBjYWxsYmFja2Agd2FzIGV4ZWN1dGVkLlxyXG5cclxuICB2YXIgbGFzdEV4ZWMgPSAwOyAvLyBGdW5jdGlvbiB0byBjbGVhciBleGlzdGluZyB0aW1lb3V0XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCkge1xyXG4gICAgaWYgKHRpbWVvdXRJRCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElEKTtcclxuICAgIH1cclxuICB9IC8vIEZ1bmN0aW9uIHRvIGNhbmNlbCBuZXh0IGV4ZWNcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcclxuICAgIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCk7XHJcbiAgICBjYW5jZWxsZWQgPSB0cnVlO1xyXG4gIH0gLy8gYG5vVHJhaWxpbmdgIGRlZmF1bHRzIHRvIGZhbHN5LlxyXG5cclxuXHJcbiAgaWYgKHR5cGVvZiBub1RyYWlsaW5nICE9PSAnYm9vbGVhbicpIHtcclxuICAgIGRlYm91bmNlTW9kZSA9IGNhbGxiYWNrO1xyXG4gICAgY2FsbGJhY2sgPSBub1RyYWlsaW5nO1xyXG4gICAgbm9UcmFpbGluZyA9IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgLypcclxuICAgKiBUaGUgYHdyYXBwZXJgIGZ1bmN0aW9uIGVuY2Fwc3VsYXRlcyBhbGwgb2YgdGhlIHRocm90dGxpbmcgLyBkZWJvdW5jaW5nXHJcbiAgICogZnVuY3Rpb25hbGl0eSBhbmQgd2hlbiBleGVjdXRlZCB3aWxsIGxpbWl0IHRoZSByYXRlIGF0IHdoaWNoIGBjYWxsYmFja2BcclxuICAgKiBpcyBleGVjdXRlZC5cclxuICAgKi9cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XHJcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzXyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgYXJndW1lbnRzX1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgZWxhcHNlZCA9IERhdGUubm93KCkgLSBsYXN0RXhlYztcclxuXHJcbiAgICBpZiAoY2FuY2VsbGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0gLy8gRXhlY3V0ZSBgY2FsbGJhY2tgIGFuZCB1cGRhdGUgdGhlIGBsYXN0RXhlY2AgdGltZXN0YW1wLlxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBleGVjKCkge1xyXG4gICAgICBsYXN0RXhlYyA9IERhdGUubm93KCk7XHJcbiAgICAgIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3VtZW50c18pO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIElmIGBkZWJvdW5jZU1vZGVgIGlzIHRydWUgKGF0IGJlZ2luKSB0aGlzIGlzIHVzZWQgdG8gY2xlYXIgdGhlIGZsYWdcclxuICAgICAqIHRvIGFsbG93IGZ1dHVyZSBgY2FsbGJhY2tgIGV4ZWN1dGlvbnMuXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICAgIHRpbWVvdXRJRCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVib3VuY2VNb2RlICYmICF0aW1lb3V0SUQpIHtcclxuICAgICAgLypcclxuICAgICAgICogU2luY2UgYHdyYXBwZXJgIGlzIGJlaW5nIGNhbGxlZCBmb3IgdGhlIGZpcnN0IHRpbWUgYW5kXHJcbiAgICAgICAqIGBkZWJvdW5jZU1vZGVgIGlzIHRydWUgKGF0IGJlZ2luKSwgZXhlY3V0ZSBgY2FsbGJhY2tgLlxyXG4gICAgICAgKi9cclxuICAgICAgZXhlYygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCk7XHJcblxyXG4gICAgaWYgKGRlYm91bmNlTW9kZSA9PT0gdW5kZWZpbmVkICYmIGVsYXBzZWQgPiBkZWxheSkge1xyXG4gICAgICAvKlxyXG4gICAgICAgKiBJbiB0aHJvdHRsZSBtb2RlLCBpZiBgZGVsYXlgIHRpbWUgaGFzIGJlZW4gZXhjZWVkZWQsIGV4ZWN1dGVcclxuICAgICAgICogYGNhbGxiYWNrYC5cclxuICAgICAgICovXHJcbiAgICAgIGV4ZWMoKTtcclxuICAgIH0gZWxzZSBpZiAobm9UcmFpbGluZyAhPT0gdHJ1ZSkge1xyXG4gICAgICAvKlxyXG4gICAgICAgKiBJbiB0cmFpbGluZyB0aHJvdHRsZSBtb2RlLCBzaW5jZSBgZGVsYXlgIHRpbWUgaGFzIG5vdCBiZWVuXHJcbiAgICAgICAqIGV4Y2VlZGVkLCBzY2hlZHVsZSBgY2FsbGJhY2tgIHRvIGV4ZWN1dGUgYGRlbGF5YCBtcyBhZnRlciBtb3N0XHJcbiAgICAgICAqIHJlY2VudCBleGVjdXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIElmIGBkZWJvdW5jZU1vZGVgIGlzIHRydWUgKGF0IGJlZ2luKSwgc2NoZWR1bGUgYGNsZWFyYCB0byBleGVjdXRlXHJcbiAgICAgICAqIGFmdGVyIGBkZWxheWAgbXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIElmIGBkZWJvdW5jZU1vZGVgIGlzIGZhbHNlIChhdCBlbmQpLCBzY2hlZHVsZSBgY2FsbGJhY2tgIHRvXHJcbiAgICAgICAqIGV4ZWN1dGUgYWZ0ZXIgYGRlbGF5YCBtcy5cclxuICAgICAgICovXHJcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZGVib3VuY2VNb2RlID8gY2xlYXIgOiBleGVjLCBkZWJvdW5jZU1vZGUgPT09IHVuZGVmaW5lZCA/IGRlbGF5IC0gZWxhcHNlZCA6IGRlbGF5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdyYXBwZXIuY2FuY2VsID0gY2FuY2VsOyAvLyBSZXR1cm4gdGhlIHdyYXBwZXIgZnVuY3Rpb24uXHJcblxyXG4gIHJldHVybiB3cmFwcGVyO1xyXG59XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQgKi9cclxuLyoqXHJcbiAqIERlYm91bmNlIGV4ZWN1dGlvbiBvZiBhIGZ1bmN0aW9uLiBEZWJvdW5jaW5nLCB1bmxpa2UgdGhyb3R0bGluZyxcclxuICogZ3VhcmFudGVlcyB0aGF0IGEgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBhIHNpbmdsZSB0aW1lLCBlaXRoZXIgYXQgdGhlXHJcbiAqIHZlcnkgYmVnaW5uaW5nIG9mIGEgc2VyaWVzIG9mIGNhbGxzLCBvciBhdCB0aGUgdmVyeSBlbmQuXHJcbiAqXHJcbiAqIEBwYXJhbSAge251bWJlcn0gICBkZWxheSAtICAgICAgICAgQSB6ZXJvLW9yLWdyZWF0ZXIgZGVsYXkgaW4gbWlsbGlzZWNvbmRzLiBGb3IgZXZlbnQgY2FsbGJhY2tzLCB2YWx1ZXMgYXJvdW5kIDEwMCBvciAyNTAgKG9yIGV2ZW4gaGlnaGVyKSBhcmUgbW9zdCB1c2VmdWwuXHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59ICBbYXRCZWdpbl0gLSAgICAgT3B0aW9uYWwsIGRlZmF1bHRzIHRvIGZhbHNlLiBJZiBhdEJlZ2luIGlzIGZhbHNlIG9yIHVuc3BlY2lmaWVkLCBjYWxsYmFjayB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYGRlbGF5YCBtaWxsaXNlY29uZHNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGxhc3QgZGVib3VuY2VkLWZ1bmN0aW9uIGNhbGwuIElmIGF0QmVnaW4gaXMgdHJ1ZSwgY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZCBvbmx5IGF0IHRoZSBmaXJzdCBkZWJvdW5jZWQtZnVuY3Rpb24gY2FsbC5cclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFmdGVyIHRoZSB0aHJvdHRsZWQtZnVuY3Rpb24gaGFzIG5vdCBiZWVuIGNhbGxlZCBmb3IgYGRlbGF5YCBtaWxsaXNlY29uZHMsIHRoZSBpbnRlcm5hbCBjb3VudGVyIGlzIHJlc2V0KS5cclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIC0gICAgICBBIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIGRlbGF5IG1pbGxpc2Vjb25kcy4gVGhlIGB0aGlzYCBjb250ZXh0IGFuZCBhbGwgYXJndW1lbnRzIGFyZSBwYXNzZWQgdGhyb3VnaCwgYXMtaXMsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGBjYWxsYmFja2Agd2hlbiB0aGUgZGVib3VuY2VkLWZ1bmN0aW9uIGlzIGV4ZWN1dGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbmV3LCBkZWJvdW5jZWQgZnVuY3Rpb24uXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZGVib3VuY2UgKGRlbGF5LCBhdEJlZ2luLCBjYWxsYmFjaykge1xyXG4gIHJldHVybiBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gdGhyb3R0bGUoZGVsYXksIGF0QmVnaW4sIGZhbHNlKSA6IHRocm90dGxlKGRlbGF5LCBjYWxsYmFjaywgYXRCZWdpbiAhPT0gZmFsc2UpO1xyXG59XHJcblxyXG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XHJcbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/throttle-debounce/cjs/index.js\n");

/***/ })

}]);